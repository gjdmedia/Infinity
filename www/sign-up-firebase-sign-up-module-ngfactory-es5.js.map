{"version":3,"sources":["webpack:///src/app/components/show-hide-password/show-hide-password.component.html","webpack:///src/app/components/show-hide-password/show-hide-password.component.ts","webpack:///src/app/firebase/auth/sign-up/firebase-sign-up.module.ts","webpack:///src/app/firebase/auth/sign-up/firebase-sign-up.page.html","webpack:///src/app/firebase/auth/sign-up/firebase-sign-up.page.ts"],"names":["ShowHidePasswordComponent","show","input","type","routes","path","component","FirebaseSignUpPageModule","FirebaseSignUpPage","router","route","menu","authService","ngZone","loadingController","location","validation_messages","message","matching_passwords_group","compose","minLength","required","formGroup","areNotEqual","signupForm","pattern","authRedirectResult","getRedirectResult","subscribe","result","user","redirectLoggedUserToProfilePage","error","manageAuthWithProvidersErrors","queryParams","params","authProvider","presentLoading","enable","dismissLoading","run","previousUrl","navigate","replaceUrl","authProviderCapitalized","toUpperCase","slice","create","redirectLoader","present","dismiss","submitError","go","getState","errorMessage","replaceState","url","split","resetSubmitError","values","value","signUpWithEmail","email","matching_passwords","password","then","prepareForAuthWithProvidersRedirection","signInWithFacebook","signInWithGoogle","console","log","signInWithTwitter"],"mappings":"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","file":"sign-up-firebase-sign-up-module-ngfactory-es5.js","sourcesContent":["<ng-content></ng-content>\n<a class=\"type-toggle\" (click)=\"toggleShow()\">\n\t<ion-icon class=\"show-option\" [hidden]=\"show\" name=\"eye-off-outline\"></ion-icon>\n\t<ion-icon class=\"hide-option\" [hidden]=\"!show\" name=\"eye-outline\"></ion-icon>\n  <!-- In case you want to use text instead of icons -->\n\t<!--\n  <span class=\"show-option\" [hidden]=\"show\">show</span>\n\t<span class=\"hide-option\" [hidden]=\"!show\">hide</span>\n  -->\n</a>\n","import { Component, ContentChild } from '@angular/core';\n\nimport { IonInput } from '@ionic/angular';\n\n@Component({\n  selector: 'app-show-hide-password',\n  templateUrl: './show-hide-password.component.html',\n  styleUrls: [\n    './show-hide-password.component.scss'\n  ]\n})\nexport class ShowHidePasswordComponent {\n  show = false;\n\n  @ContentChild(IonInput) input: IonInput;\n\n  constructor() {}\n\n  toggleShow() {\n    this.show = !this.show;\n    if (this.show) {\n      this.input.type = 'text';\n    } else {\n      this.input.type = 'password';\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\nimport { FirebaseSignUpPage } from './firebase-sign-up.page';\nimport { ComponentsModule } from '../../../components/components.module';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: FirebaseSignUpPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    ComponentsModule\n  ],\n  declarations: [FirebaseSignUpPage]\n})\nexport class FirebaseSignUpPageModule {}\n","<ion-header class=\"ion-no-border\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-back-button></ion-back-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"signup-content\">\n  <h2 class=\"auth-title\">\n    <br/>\n  </h2>\n  <img src=\"/assets/images/ig_logo_black.png\" alt=\"\">\n  <h5 style=\"text-align: center;\">Please Register</h5>\n  <form [formGroup]=\"signupForm\" (ngSubmit)=\"signUpWithEmail()\">\n    <ion-list class=\"inputs-list\" lines=\"full\">\n      <ion-item class=\"input-item\">\n        <ion-input type=\"email\" placeholder=\"Email\" formControlName=\"email\" clearInput autocapitalize=\"off\" inputmode=\"email\"></ion-input>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validation_messages.email\">\n          <div class=\"error-message\" *ngIf=\"signupForm.get('email').hasError(validation.type) && (signupForm.get('email').dirty || signupForm.get('email').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n\n      <div formGroupName=\"matching_passwords\">\n        <ion-item class=\"input-item\">\n          <app-show-hide-password>\n            <ion-input type=\"password\" placeholder=\"Password\" formControlName=\"password\"></ion-input>\n          </app-show-hide-password>\n        </ion-item>\n        <div class=\"error-container\">\n          <ng-container *ngFor=\"let validation of validation_messages.password\">\n            <div class=\"error-message\" *ngIf=\"signupForm.get('matching_passwords').get('password').hasError(validation.type) && (signupForm.get('matching_passwords').get('password').dirty || signupForm.get('matching_passwords').get('password').touched)\">\n              <ion-icon name=\"information-circle-outline\"></ion-icon>\n              <span>{{ validation.message }}</span>\n            </div>\n          </ng-container>\n        </div>\n\n        <ion-item class=\"input-item\">\n          <app-show-hide-password>\n            <ion-input type=\"password\" placeholder=\"Confirm Password\" formControlName=\"confirm_password\"></ion-input>\n          </app-show-hide-password>\n        </ion-item>\n        <div class=\"error-container\">\n          <ng-container *ngFor=\"let validation of validation_messages.confirm_password\">\n            <div class=\"error-message\" *ngIf=\"signupForm.get('matching_passwords').get('confirm_password').hasError(validation.type) && (signupForm.get('matching_passwords').get('confirm_password').dirty || signupForm.get('matching_passwords').get('confirm_password').touched)\">\n              <ion-icon name=\"information-circle-outline\"></ion-icon>\n              <span>{{ validation.message }}</span>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validation_messages.matching_passwords\">\n          <div class=\"error-message\" *ngIf=\"signupForm.get('matching_passwords').hasError(validation.type) && (signupForm.get('matching_passwords').get('confirm_password').dirty || signupForm.get('matching_passwords').get('confirm_password').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n    </ion-list>\n\n    <ion-button class=\"signup-btn\" type=\"submit\" expand=\"block\" [disabled]=\"!signupForm.valid\">Sign Up</ion-button>\n    <div class=\"error-container\" *ngIf=\"submitError\">\n      <div class=\"error-message\">\n        <ion-icon name=\"information-circle-outline\"></ion-icon>\n        <span>{{ submitError }}</span>\n      </div>\n    </div>\n    \n      <ion-button class=\"signup-btn\"  fill=\"clear\" expand=\"block\" [routerLink]=\"['/firebase/auth/sign-in']\">\n        Already have an account?\n      </ion-button>\n\n  </form>\n<!-- \n  <div class=\"social-auth-options\">\n    <p class=\"options-divider\">Or</p>\n    <ion-button class=\"social-auth-btn facebook-auth-btn\" expand=\"block\" color=\"facebook\" (click)=\"doFacebookSignup()\">Sign Up with Facebook</ion-button>\n    <ion-button class=\"social-auth-btn google-auth-btn\" expand=\"block\" color=\"google\" (click)=\"doGoogleSignup()\">Sign Up with Google</ion-button>\n    <ion-button class=\"social-auth-btn twitter-auth-btn\" expand=\"block\" color=\"twitter\" (click)=\"doTwitterSignup()\">Sign Up with Twitter</ion-button>\n  </div> -->\n</ion-content>\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\nimport { Location } from '@angular/common';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { MenuController, LoadingController } from '@ionic/angular';\nimport { PasswordValidator } from '../../../validators/password.validator';\nimport { FirebaseAuthService } from '../firebase-auth.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-firebase-sign-up',\n  templateUrl: './firebase-sign-up.page.html',\n  styleUrls: [\n    './styles/firebase-sign-up.page.scss'\n  ]\n})\nexport class FirebaseSignUpPage implements OnInit {\n  signupForm: FormGroup;\n  matching_passwords_group: FormGroup;\n  submitError: string;\n  redirectLoader: HTMLIonLoadingElement;\n  authRedirectResult: Subscription;\n\n  validation_messages = {\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Enter a valid email.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 6 characters long.' }\n    ],\n    'confirm_password': [\n      { type: 'required', message: 'Confirm password is required' }\n    ],\n    'matching_passwords': [\n      { type: 'areNotEqual', message: 'Password mismatch' }\n    ]\n  };\n\n  constructor(\n    public router: Router,\n    public route: ActivatedRoute,\n    public menu: MenuController,\n    public authService: FirebaseAuthService,\n    private ngZone: NgZone,\n    public loadingController: LoadingController,\n    public location: Location,\n  ) {\n    this.matching_passwords_group = new FormGroup({\n      'password': new FormControl('', Validators.compose([\n        Validators.minLength(6),\n        Validators.required\n      ])),\n      'confirm_password': new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areNotEqual(formGroup);\n    });\n\n    this.signupForm = new FormGroup({\n      'email': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n      ])),\n      'matching_passwords': this.matching_passwords_group\n    });\n\n\n    // Get firebase authentication redirect result invoken when using signInWithRedirect()\n    // signInWithRedirect() is only used when client is in web but not desktop\n    this.authRedirectResult = this.authService.getRedirectResult()\n    .subscribe(result => {\n      if (result.user) {\n        this.redirectLoggedUserToProfilePage();\n      } else if (result.error) {\n        this.manageAuthWithProvidersErrors(result.error);\n      }\n    });\n\n    // Check if url contains our custom 'auth-redirect' param, then show a loader while we receive the getRedirectResult notification\n    this.route.queryParams.subscribe(params => {\n      const authProvider = params['auth-redirect'];\n      if (authProvider) {\n        this.presentLoading(authProvider);\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.menu.enable(false);\n  }\n\n  // Once the auth provider finished the authentication flow, and the auth redirect completes,\n  // hide the loader and redirect the user to the profile page\n  redirectLoggedUserToProfilePage() {\n    this.dismissLoading();\n\n    // As we are calling the Angular router navigation inside a subscribe method, the navigation will be triggered outside Angular zone.\n    // That's why we need to wrap the router navigation call inside an ngZone wrapper\n    this.ngZone.run(() => {\n      // Get previous URL from our custom History Helper\n      // If there's no previous page, then redirect to profile\n      // const previousUrl = this.historyHelper.previousUrl || 'firebase/auth/profile';\n      const previousUrl = 'firebase/auth/profile';\n\n      // No need to store in the navigation history the sign-in page with redirect params (it's justa a mandatory mid-step)\n      // Navigate to profile and replace current url with profile\n      this.router.navigate([previousUrl], { replaceUrl: true });\n    });\n  }\n\n  async presentLoading(authProvider?: string) {\n    const authProviderCapitalized = authProvider[0].toUpperCase() + authProvider.slice(1);\n    this.redirectLoader = await this.loadingController.create({\n      message: authProvider ? 'Signing up with ' + authProviderCapitalized : 'Signin up ...'\n    });\n    await this.redirectLoader.present();\n  }\n\n  async dismissLoading() {\n    if (this.redirectLoader) {\n      await this.redirectLoader.dismiss();\n    }\n  }\n\n  resetSubmitError() {\n    this.submitError = null;\n  }\n\n  // Before invoking auth provider redirect flow, present a loading indicator and add a flag to the path.\n  // The precense of the flag in the path indicates we should wait for the auth redirect to complete.\n  prepareForAuthWithProvidersRedirection(authProvider: string) {\n    this.presentLoading(authProvider);\n\n    this.location.go(this.location.path(), 'auth-redirect=' + authProvider, this.location.getState());\n  }\n\n  manageAuthWithProvidersErrors(errorMessage: string) {\n    this.submitError = errorMessage;\n    // remove auth-redirect param from url\n    this.location.replaceState(this.router.url.split('?')[0], '');\n    this.dismissLoading();\n  }\n\n  signUpWithEmail(): void {\n    this.resetSubmitError();\n    const values = this.signupForm.value;\n    this.authService.signUpWithEmail(values.email, values.matching_passwords.password)\n      .then(user => {\n        // navigate to user profile\n        \n        this.redirectLoggedUserToProfilePage();\n      })\n      .catch(error => {\n        this.submitError = error.message;\n      });\n  }\n\n  doFacebookSignup(): void {\n    this.resetSubmitError();\n    this.prepareForAuthWithProvidersRedirection('facebook');\n\n    this.authService.signInWithFacebook()\n    .subscribe((result) => {\n      // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n      // const token = result.credential.accessToken;\n      this.redirectLoggedUserToProfilePage();\n    }, (error) => {\n      this.manageAuthWithProvidersErrors(error.message);\n    });\n  }\n\n  doGoogleSignup(): void {\n    this.resetSubmitError();\n    this.prepareForAuthWithProvidersRedirection('google');\n\n    this.authService.signInWithGoogle()\n    .subscribe((result) => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      // var token = result.credential.accessToken;\n      this.redirectLoggedUserToProfilePage();\n    }, (error) => {\n        console.log(error);\n      this.manageAuthWithProvidersErrors(error.message);\n    });\n  }\n\n  doTwitterSignup(): void {\n    this.resetSubmitError();\n    this.prepareForAuthWithProvidersRedirection('twitter');\n\n    this.authService.signInWithTwitter()\n    .subscribe((result) => {\n      // This gives you a Twitter Access Token. You can use it to access the Twitter API.\n      // var token = result.credential.accessToken;\n      this.redirectLoggedUserToProfilePage();\n    }, (error) => {\n      console.log(error);\n      this.manageAuthWithProvidersErrors(error.message);\n    });\n  }\n}\n"]}