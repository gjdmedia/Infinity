{"version":3,"sources":["webpack:///src/app/components/counter-input/counter-input.component.html","webpack:///src/app/components/counter-input/counter-input.component.ts"],"names":["counterRangeValidator","minValue","maxValue","c","err","rangeError","given","value","min","max","CounterInputComponent","_counterValue","propagateChange","validateFn","inputs","counterRangeMax","counterRangeMin","counterValue","fn","val"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uEAAA,iJ,IACE,mJ,IACE;AAAA;AAAA,sBAAsD,UAAtD;;AAAiC;;;;;AAAjC;AAAA,0N,GAAA,8T,GACE,mW,GAAA;AAAA;AAAA,gB,GAIN,mJ,IAA4B,6E,IAC5B,iJ,IACE,mJ,IACE;AAAA;AAAA,sBAAsD,UAAtD;;AAAiC;;;;;AAAjC;AAAA,0N,GAAA,+T,GACE,iW,GAAA;AAAA;AAAA,gB,GAAsC;AARX;;AAA3B,wBAA2B,SAA3B;;AAQ2B;;AAA3B,yBAA2B,SAA3B;AAAqC,S,EAAA;AAAA;AAJf;;AAAA;AAAmB,S;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACN/C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAEO,eAASA,qBAAT,CAA+BC,QAA/B,EAAyCC,QAAzC,EAAmD;AACxD,eAAO,UAACC,CAAD,EAAoB;AACzB,cAAMC,GAAG,GAAG;AACVC,sBAAU,EAAE;AACVC,mBAAK,EAAEH,CAAC,CAACI,KADC;AAEVC,iBAAG,EAAEP,QAAQ,IAAI,CAFP;AAGVQ,iBAAG,EAAEP,QAAQ,IAAI;AAHP;AADF,WAAZ;AAQA,iBAAQC,CAAC,CAACI,KAAF,GAAU,CAACL,QAAX,IAAuBC,CAAC,CAACI,KAAF,GAAU,CAACN,QAAnC,GAA+CG,GAA/C,GAAqD,IAA5D;AACD,SAVD;AAWD;;UAYYM,qB;AAVb;AAAA;;AAWE;AACuB,eAAAC,aAAA,GAAgB,CAAhB;;AAMvB,eAAAC,eAAA,GAAuB,YAAM,CAAE,CAA/B,CAlBF,CAkBmC;;;AACjC,eAAAC,UAAA,GAAkB,YAAM,CAAE,CAA1B,CAnBF,CAmB8B;;AAwC7B;;;;sCA7BaC,M,EAAQ;AAClB,gBAAIA,MAAM,CAACC,eAAP,IAA0BD,MAAM,CAACE,eAArC,EAAsD;AACpD,mBAAKH,UAAL,GAAkBb,qBAAqB,CAAC,KAAKgB,eAAN,EAAuB,KAAKD,eAA5B,CAAvC;AACD;AACF;;;qCAEUR,K,EAAO;AAChB,gBAAIA,KAAJ,EAAW;AACT,mBAAKU,YAAL,GAAoBV,KAApB;AACD;AACF;;;2CAEgBW,E,EAAI;AACnB,iBAAKN,eAAL,GAAuBM,EAAvB;AACD;;;8CAEmB,CAAE;;;qCAEX;AACT,iBAAKD,YAAL;AACD;;;qCAEU;AACT,iBAAKA,YAAL;AACD;;;mCAEQd,C,EAAgB;AACvB,mBAAO,KAAKU,UAAL,CAAgBV,CAAhB,CAAP;AACD;;;8BArCkB;AACjB,mBAAO,KAAKQ,aAAZ;AACD,W;4BAEgBQ,G,EAAK;AACpB,iBAAKR,aAAL,GAAqBQ,GAArB;AACA,iBAAKP,eAAL,CAAqBO,GAArB;AACD","file":"default~forms-filters-forms-filters-module-ngfactory~forms-validations-forms-validations-module-ngfactory-es5.js","sourcesContent":["<div class=\"button-outer\">\n  <div class=\"button-wrapper\">\n    <ion-button class=\"counter-icon\" (click)=\"decrease()\">\n      <ion-icon slot=\"icon-only\" name=\"remove\"></ion-icon>\n    </ion-button>\n  </div>\n</div>\n<span class=\"counter-value\">{{ _counterValue }}</span>\n<div class=\"button-outer\">\n  <div class=\"button-wrapper\">\n    <ion-button class=\"counter-icon\" (click)=\"increase()\">\n      <ion-icon slot=\"icon-only\" name=\"add\"></ion-icon>\n    </ion-button>\n  </div>\n</div>\n","import { Component, forwardRef, Input, OnChanges, ViewEncapsulation } from '@angular/core';\nimport { FormControl, ControlValueAccessor, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nexport function counterRangeValidator(minValue, maxValue) {\n  return (c: FormControl) => {\n    const err = {\n      rangeError: {\n        given: c.value,\n        min: minValue || 0,\n        max: maxValue || 10\n      }\n    };\n\n    return (c.value > +maxValue || c.value < +minValue) ? err : null;\n  };\n}\n\n@Component({\n  selector: 'app-counter-input',\n  templateUrl: './counter-input.component.html',\n  styleUrls: ['./counter-input.component.scss'],\n  providers: [\n    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CounterInputComponent), multi: true },\n    { provide: NG_VALIDATORS, useExisting: forwardRef(() => CounterInputComponent), multi: true }\n  ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class CounterInputComponent implements ControlValueAccessor, OnChanges {\n  // tslint:disable-next-line:no-input-rename\n  @Input('counterValue') _counterValue = 0;\n  // tslint:disable-next-line:no-input-rename\n  @Input('max') counterRangeMax;\n  // tslint:disable-next-line:no-input-rename\n  @Input('min') counterRangeMin;\n\n  propagateChange: any = () => {}; // Noop function\n  validateFn: any = () => {}; // Noop function\n\n  get counterValue() {\n    return this._counterValue;\n  }\n\n  set counterValue(val) {\n    this._counterValue = val;\n    this.propagateChange(val);\n  }\n\n  ngOnChanges(inputs) {\n    if (inputs.counterRangeMax || inputs.counterRangeMin) {\n      this.validateFn = counterRangeValidator(this.counterRangeMin, this.counterRangeMax);\n    }\n  }\n\n  writeValue(value) {\n    if (value) {\n      this.counterValue = value;\n    }\n  }\n\n  registerOnChange(fn) {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched() {}\n\n  increase() {\n    this.counterValue++;\n  }\n\n  decrease() {\n    this.counterValue--;\n  }\n\n  validate(c: FormControl) {\n    return this.validateFn(c);\n  }\n}\n"]}