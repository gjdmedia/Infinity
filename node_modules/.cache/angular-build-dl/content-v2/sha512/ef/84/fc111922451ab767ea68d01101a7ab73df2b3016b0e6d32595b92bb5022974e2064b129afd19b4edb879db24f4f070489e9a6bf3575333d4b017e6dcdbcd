{"version":3,"sources":["./node_modules/angular-pipes/fesm2015/angular-pipes.js","./src/app/pipes/pipes.module.ts","./src/app/utils/resolver-helper.ts"],"names":[],"mappingsmC;AACY;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,MAAM;AAChC,gCAAgC,QAAQ;AACxC,sBAAsB,IAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpE;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,UAAU,wDAAU;AACpB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,kBAAkB,wDAAU;AAC5B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,UAAU,wDAAU;AACpB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,kBAAkB,wDAAU;AAC5B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU,wDAAU;AACpB,IAAI,0DAAI,EAAE,cAAc;AACxB;AACA;AACA;AACA,kBAAkB,wDAAU;AAC5B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,yBAAyB,wDAAU;AACnC,IAAI,8DAAQ;AACZ;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wDAAU;AACpB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,kBAAkB,wDAAU;AAC5B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wDAAU;AACtD,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,6BAA6B,wDAAU;AACvC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,8BAA8B,wDAAU;AACxC,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,2BAA2B,wDAAU;AACrC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,wBAAwB,wDAAU;AAClC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,wBAAwB,wDAAU;AAClC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,qBAAqB,wDAAU;AAC/B,IAAI,8DAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wDAAU;AACjC,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,+BAA+B,wDAAU;AACzC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,wBAAwB,wDAAU;AAClC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wDAAU;AAC5B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,0BAA0B,wDAAU;AACpC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,4BAA4B,wDAAU;AACtC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,wDAAU;AACvB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,qBAAqB,wDAAU;AAC/B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAU;AAC3B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,yBAAyB,wDAAU;AACnC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAU;AAC/B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,6BAA6B,wDAAU;AACvC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,wDAAU;AACvB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,qBAAqB,wDAAU;AAC/B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wDAAU;AAC5B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,0BAA0B,wDAAU;AACpC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAU;AAC3B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,yBAAyB,wDAAU;AACnC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,wDAAU;AACjC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,wDAAU;AACjC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,wDAAU;AACjC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,wBAAwB,wDAAU;AAClC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,qBAAqB,wDAAU;AAC/B,IAAI,8DAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,0BAA0B,wDAAU;AACpC,IAAI,8DAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,wDAAU;AACjC,IAAI,8DAAQ;AACZ;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO,GAAG,KAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,YAAY;AACpB,SAAS,oCAAoC;AAC7C,SAAS,oCAAoC;AAC7C,SAAS,qCAAqC;AAC9C,SAAS,qCAAqC;AAC9C,SAAS,2CAA2C;AACpD;AACA,0BAA0B,wDAAU;AACpC,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,wDAAU;AACvB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,qBAAqB,wDAAU;AAC/B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wDAAU;AACpB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,kBAAkB,wDAAU;AAC5B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wDAAU;AACpB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,kBAAkB,wDAAU;AAC5B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI,EAAE,eAAe;AACzB;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI,EAAE,mBAAmB;AAC7B;AACA;AACA;AACA,uBAAuB,wDAAU;AACjC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wDAAU;AACpB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,kBAAkB,wDAAU;AAC5B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,wDAAU;AACjC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,wDAAU;AACjC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAU;AAC3B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,yBAAyB,wDAAU;AACnC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAU;AAC3B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,yBAAyB,wDAAU;AACnC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC,4CAA4C,MAAM;AAClD;AACA;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,wDAAU;AACjC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,wBAAwB,wDAAU;AAClC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wDAAU;AACnC,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,iCAAiC,wDAAU;AAC3C,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,wBAAwB,wDAAU;AAClC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wDAAU;AACnC,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,iCAAiC,wDAAU;AAC3C,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,wDAAU;AACjC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA,aAAa,wDAAU;AACvB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,qBAAqB,wDAAU;AAC/B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,wBAAwB,wDAAU;AAClC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,6BAA6B;AAC1C,aAAa,6BAA6B;AAC1C;AACA;AACA;AACA,aAAa;AACb,aAAa,8BAA8B;AAC3C,aAAa,0CAA0C;AACvD,aAAa,8BAA8B;AAC3C,aAAa,8BAA8B;AAC3C,aAAa,oCAAoC;AACjD,aAAa,8BAA8B;AAC3C,aAAa,iEAAiE;AAC9E,aAAa,+FAA+F;AAC5G,aAAa,qGAAqG;AAClH,aAAa,8BAA8B;AAC3C,aAAa,oCAAoC;AACjD,aAAa,oCAAoC;AACjD;AACA;AACA;AACA,aAAa;AACb,aAAa,2DAA2D;AACxE;AACA;AACA;AACA,aAAa;AACb,aAAa,qGAAqG;AAClH;AACA;AACA;AACA,aAAa;AACb,aAAa,qDAAqD;AAClE,aAAa,qGAAqG;AAClH;AACA;AACA;AACA,aAAa;AACb,aAAa,8BAA8B;AAC3C,aAAa,8BAA8B;AAC3C,aAAa,uEAAuE;AACpF;AACA;AACA;AACA,aAAa;AACb,aAAa,8BAA8B;AAC3C,aAAa,8BAA8B;AAC3C;AACA;AACA;AACA,aAAa;AACb,aAAa,8BAA8B;AAC3C,aAAa,8BAA8B;AAC3C,aAAa,8BAA8B;AAC3C,aAAa,8BAA8B;AAC3C,aAAa,6EAA6E;AAC1F,aAAa,qDAAqD;AAClE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,aAAa,2GAA2G;AACxH,aAAa,8BAA8B;AAC3C,aAAa,8BAA8B;AAC3C;AACA;AACA;AACA,aAAa;AACb,aAAa,iEAAiE;AAC9E,aAAa,8BAA8B;AAC3C,aAAa,6EAA6E;AAC1F,aAAa,+CAA+C;AAC5D,aAAa,yGAAyG;AACtH,aAAa,qGAAqG;AAClH;AACA;AACA;AACA,aAAa;AACb,aAAa,8BAA8B;AAC3C,aAAa,0CAA0C;AACvD,aAAa,8BAA8B;AAC3C,aAAa,8BAA8B;AAC3C,aAAa,oCAAoC;AACjD,aAAa,8BAA8B;AAC3C,aAAa,6EAA6E;AAC1F,aAAa,+FAA+F;AAC5G;AACA;AACA;AACA,aAAa;AACb,aAAa,8BAA8B;AAC3C,aAAa,oCAAoC;AACjD;AACA;AACA;AACA,aAAa;AACb,aAAa,+CAA+C;AAC5D,aAAa,8BAA8B;AAC3C,aAAa,8BAA8B;AAC3C,aAAa,8BAA8B;AAC3C,aAAa,+BAA+B;AAC5C,aAAa,+BAA+B;AAC5C,aAAa,2GAA2G;AACxH,aAAa,2GAA2G;AACxH,aAAa,8BAA8B;AAC3C;AACA;AACA;AACA,aAAa;AACb,aAAa,qDAAqD;AAClE,aAAa,qGAAqG;AAClH;AACA;AACA;AACA,aAAa;AACb,aAAa,8BAA8B;AAC3C,aAAa,iEAAiE;AAC9E;AACA;AACA;AACA,aAAa;AACb,aAAa,8BAA8B;AAC3C;AACA;AACA;AACA,aAAa;AACb,aAAa,8BAA8B;AAC3C,aAAa,8BAA8B;AAC3C,aAAa,8BAA8B;AAC3C,aAAa,8BAA8B;AAC3C,aAAa,mFAAmF;AAChG,aAAa,qDAAqD;AAClE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,aAAa,4BAA4B;AACzC;AACA;AACA;AACA,aAAa;AACb,aAAa,8BAA8B;AAC3C,aAAa,8BAA8B;AAC3C;AACA;AACA;AACA,aAAa;AACb,aAAa,iEAAiE;AAC9E,aAAa,8BAA8B;AAC3C,aAAa,mFAAmF;AAChG,aAAa,+CAA+C;AAC5D,aAAa,6GAA6G;AAC1H,aAAa,qGAAqG;AAClH;AACA;AACA,uBAAuB,4BAA4B;AACnD;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI,EAAE,mBAAmB;AAC7B;AACA;AACA;AACA,uBAAuB,wDAAU;AACjC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI,EAAE,eAAe;AACzB;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAU;AAC3B,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,yBAAyB,wDAAU;AACnC,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,8DAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEmmG;AACnmG;;;;;;;;;;;;;ACrpFA;AAAA;AAAO,MAAM,WAAW;CAAG;;;;;;;;;;;;;ACxB3B;AAAA;AAAA;AAAA;AAAgD;AACV;AAM/B,MAAM,cAAc;IACzB,8GAA8G;IACvG,MAAM,CAAC,WAAW,CAAI,MAA0B,EAAE,WAAuC;QAC9F,IAAI,MAAM,YAAY,2DAAS,EAAE;YAC/B,OAAO,MAAM,CAAC,KAAK,CAAC;SACrB;aAAM,IAAI,MAAM,YAAY,WAAW,EAAE;YACxC,sHAAsH;YACtH,4FAA4F;YAC5F,6DAA6D;YAC7D,OAAO,+CAAE,CAAC,MAAM,CAAC,CAAC;SACnB;IACH,CAAC;CACF","file":"default~brick-details-brick-details-module-ngfactory~brick-listing-brick-listing-module-ngfactory~ca~65f3628f-es2015.js","sourcesContent":["import { __decorate } from 'tslib';\nimport { Pipe, NgModule } from '@angular/core';\n\nfunction isUndefined(value) {\r\n    return typeof value === 'undefined';\r\n}\r\nfunction isNull(value) {\r\n    return value === null;\r\n}\r\nfunction isNumber(value) {\r\n    return typeof value === 'number';\r\n}\r\nfunction isNumberFinite(value) {\r\n    return isNumber(value) && isFinite(value);\r\n}\r\n// Not strict positive\r\nfunction isPositive(value) {\r\n    return value >= 0;\r\n}\r\nfunction isInteger(value) {\r\n    // No rest, is an integer\r\n    return value % 1 === 0;\r\n}\r\nfunction isNil(value) {\r\n    return value === null || typeof value === 'undefined';\r\n}\r\nfunction isString(value) {\r\n    return typeof value === 'string';\r\n}\r\nfunction isObject(value) {\r\n    return value !== null && typeof value === 'object';\r\n}\r\nfunction isArray(value) {\r\n    return Array.isArray(value);\r\n}\r\nfunction isFunction(value) {\r\n    return typeof value === 'function';\r\n}\r\nfunction toDecimal(value, decimal) {\r\n    return Math.round(value * Math.pow(10, decimal)) / Math.pow(10, decimal);\r\n}\r\nfunction upperFirst(value) {\r\n    return value.slice(0, 1).toUpperCase() + value.slice(1);\r\n}\r\nfunction createRound(method) {\r\n    // <any>Math to suppress error\r\n    const func = Math[method];\r\n    return function (value, precision = 0) {\r\n        if (typeof value === 'string') {\r\n            throw new TypeError('Rounding method needs a number');\r\n        }\r\n        if (typeof precision !== 'number' || isNaN(precision)) {\r\n            precision = 0;\r\n        }\r\n        if (precision) {\r\n            let pair = `${value}e`.split('e');\r\n            const val = func(`${pair[0]}e` + (+pair[1] + precision));\r\n            pair = `${val}e`.split('e');\r\n            return +(pair[0] + 'e' + (+pair[1] - precision));\r\n        }\r\n        return func(value);\r\n    };\r\n}\r\nfunction leftPad(str, len = 0, ch = ' ') {\r\n    str = String(str);\r\n    ch = toString(ch);\r\n    let i = -1;\r\n    const length = len - str.length;\r\n    while (++i < length && str.length + ch.length <= len) {\r\n        str = ch + str;\r\n    }\r\n    return str;\r\n}\r\nfunction rightPad(str, len = 0, ch = ' ') {\r\n    str = String(str);\r\n    ch = toString(ch);\r\n    let i = -1;\r\n    const length = len - str.length;\r\n    while (++i < length && str.length + ch.length <= len) {\r\n        str += ch;\r\n    }\r\n    return str;\r\n}\r\nfunction toString(value) {\r\n    return `${value}`;\r\n}\r\nfunction pad(str, len = 0, ch = ' ') {\r\n    str = String(str);\r\n    ch = toString(ch);\r\n    let i = -1;\r\n    const length = len - str.length;\r\n    let left = true;\r\n    while (++i < length) {\r\n        const l = str.length + ch.length <= len ? str.length + ch.length : str.length + 1;\r\n        if (left) {\r\n            str = leftPad(str, l, ch);\r\n        }\r\n        else {\r\n            str = rightPad(str, l, ch);\r\n        }\r\n        left = !left;\r\n    }\r\n    return str;\r\n}\r\nfunction flatten(input, index = 0) {\r\n    if (index >= input.length) {\r\n        return input;\r\n    }\r\n    if (isArray(input[index])) {\r\n        return flatten(input.slice(0, index).concat(input[index], input.slice(index + 1)), index);\r\n    }\r\n    return flatten(input, index + 1);\r\n}\r\nfunction getProperty(value, key) {\r\n    if (isNil(value) || !isObject(value)) {\r\n        return undefined;\r\n    }\r\n    const keys = key.split('.');\r\n    let result = value[keys.shift()];\r\n    for (const key of keys) {\r\n        if (isNil(result) || !isObject(result)) {\r\n            return undefined;\r\n        }\r\n        result = result[key];\r\n    }\r\n    return result;\r\n}\r\nfunction sum(input, initial = 0) {\r\n    return input.reduce((previous, current) => previous + current, initial);\r\n}\r\n// http://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array-in-javascript\r\nfunction shuffle(input) {\r\n    if (!isArray(input)) {\r\n        return input;\r\n    }\r\n    const copy = [...input];\r\n    for (let i = copy.length; i; --i) {\r\n        const j = Math.floor(Math.random() * i);\r\n        const x = copy[i - 1];\r\n        copy[i - 1] = copy[j];\r\n        copy[j] = x;\r\n    }\r\n    return copy;\r\n}\r\nfunction deepIndexOf(collection, value) {\r\n    let index = -1;\r\n    const length = collection.length;\r\n    while (++index < length) {\r\n        if (deepEqual(value, collection[index])) {\r\n            return index;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    if (!(typeof a === 'object' && typeof b === 'object')) {\r\n        return a === b;\r\n    }\r\n    const keysA = Object.keys(a);\r\n    const keysB = Object.keys(b);\r\n    if (keysA.length !== keysB.length) {\r\n        return false;\r\n    }\r\n    // Test for A's keys different from B.\r\n    var hasOwn = Object.prototype.hasOwnProperty;\r\n    for (let i = 0; i < keysA.length; i++) {\r\n        const key = keysA[i];\r\n        if (!hasOwn.call(b, keysA[i]) || !deepEqual(a[key], b[key])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isDeepObject(object) {\r\n    return object.__isDeepObject__;\r\n}\r\nfunction wrapDeep(object) {\r\n    return new DeepWrapper(object);\r\n}\r\nfunction unwrapDeep(object) {\r\n    if (isDeepObject(object)) {\r\n        return object.data;\r\n    }\r\n    return object;\r\n}\r\nclass DeepWrapper {\r\n    constructor(data) {\r\n        this.data = data;\r\n        this.__isDeepObject__ = true;\r\n    }\r\n}\r\nfunction count(input) {\r\n    if (!isArray(input) && !isObject(input) && !isString(input)) {\r\n        return input;\r\n    }\r\n    if (isObject(input)) {\r\n        return Object.keys(input).map(value => input[value]).length;\r\n    }\r\n    return input.length;\r\n}\r\nfunction empty(input) {\r\n    if (!isArray(input)) {\r\n        return input;\r\n    }\r\n    return input.length === 0;\r\n}\r\nfunction every(input, predicate) {\r\n    if (!isArray(input) || !predicate) {\r\n        return input;\r\n    }\r\n    let result = true;\r\n    let i = -1;\r\n    while (++i < input.length && result) {\r\n        result = predicate(input[i], i, input);\r\n    }\r\n    return result;\r\n}\r\nfunction takeUntil(input, predicate) {\r\n    let i = -1;\r\n    const result = [];\r\n    while (++i < input.length && !predicate(input[i], i, input)) {\r\n        result[i] = input[i];\r\n    }\r\n    return result;\r\n}\r\nfunction takeWhile(input, predicate) {\r\n    return takeUntil(input, (item, index, collection) => !predicate(item, index, collection));\r\n}\n\nlet GroupByPipe = class GroupByPipe {\r\n    transform(input, prop) {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        const arr = {};\r\n        for (const value of input) {\r\n            const field = getProperty(value, prop);\r\n            if (isUndefined(arr[field])) {\r\n                arr[field] = [];\r\n            }\r\n            arr[field].push(value);\r\n        }\r\n        return Object.keys(arr).map(key => ({ key, value: arr[key] }));\r\n    }\r\n};\r\nGroupByPipe = __decorate([\r\n    Pipe({\r\n        name: 'groupBy',\r\n    })\r\n], GroupByPipe);\r\nlet NgGroupByPipeModule = class NgGroupByPipeModule {\r\n};\r\nNgGroupByPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [GroupByPipe],\r\n        exports: [GroupByPipe],\r\n    })\r\n], NgGroupByPipeModule);\n\nlet MaxPipe = class MaxPipe {\r\n    transform(input) {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        if (input.length === 0) {\r\n            return undefined;\r\n        }\r\n        let max = input[0];\r\n        input.forEach((value) => {\r\n            if (max < value) {\r\n                max = value;\r\n            }\r\n        });\r\n        return max;\r\n    }\r\n};\r\nMaxPipe = __decorate([\r\n    Pipe({\r\n        name: 'max',\r\n    })\r\n], MaxPipe);\r\nlet NgMaxPipeModule = class NgMaxPipeModule {\r\n};\r\nNgMaxPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [MaxPipe],\r\n        exports: [MaxPipe],\r\n    })\r\n], NgMaxPipeModule);\n\nlet MeanPipe = class MeanPipe {\r\n    transform(input) {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        const count = input.length;\r\n        if (count === 0) {\r\n            return undefined;\r\n        }\r\n        return sum(input) / count;\r\n    }\r\n};\r\nMeanPipe = __decorate([\r\n    Pipe({\r\n        name: 'mean',\r\n    })\r\n], MeanPipe);\r\nlet NgMeanPipeModule = class NgMeanPipeModule {\r\n};\r\nNgMeanPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [MeanPipe],\r\n        exports: [MeanPipe],\r\n    })\r\n], NgMeanPipeModule);\n\nlet MinPipe = class MinPipe {\r\n    transform(input) {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        if (input.length === 0) {\r\n            return undefined;\r\n        }\r\n        let min = input[0];\r\n        input.forEach((value) => {\r\n            if (min > value) {\r\n                min = value;\r\n            }\r\n        });\r\n        return min;\r\n    }\r\n};\r\nMinPipe = __decorate([\r\n    Pipe({\r\n        name: 'min',\r\n    })\r\n], MinPipe);\r\nlet NgMinPipeModule = class NgMinPipeModule {\r\n};\r\nNgMinPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [MinPipe],\r\n        exports: [MinPipe],\r\n    })\r\n], NgMinPipeModule);\n\nlet SumPipe = class SumPipe {\r\n    transform(input) {\r\n        return !isArray(input) ? input : sum(input);\r\n    }\r\n};\r\nSumPipe = __decorate([\r\n    Pipe({ name: 'sum' })\r\n], SumPipe);\r\nlet NgSumPipeModule = class NgSumPipeModule {\r\n};\r\nNgSumPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [SumPipe],\r\n        exports: [SumPipe],\r\n    })\r\n], NgSumPipeModule);\n\nlet NgAggregatePipesModule = class NgAggregatePipesModule {\r\n};\r\nNgAggregatePipesModule = __decorate([\r\n    NgModule({\r\n        imports: [NgGroupByPipeModule, NgMaxPipeModule, NgMeanPipeModule, NgMinPipeModule, NgSumPipeModule],\r\n    })\r\n], NgAggregatePipesModule);\n\nlet EmptyPipe = class EmptyPipe {\r\n    transform(input) {\r\n        return empty(input);\r\n    }\r\n};\r\nEmptyPipe = __decorate([\r\n    Pipe({\r\n        name: 'empty',\r\n    })\r\n], EmptyPipe);\r\nlet NgEmptyPipeModule = class NgEmptyPipeModule {\r\n};\r\nNgEmptyPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [EmptyPipe],\r\n        exports: [EmptyPipe],\r\n    })\r\n], NgEmptyPipeModule);\n\nlet HeadPipe = class HeadPipe {\r\n    transform(input) {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        // Will return undefined if length is 0\r\n        return input[0];\r\n    }\r\n};\r\nHeadPipe = __decorate([\r\n    Pipe({\r\n        name: 'head',\r\n    })\r\n], HeadPipe);\r\nlet NgHeadPipeModule = class NgHeadPipeModule {\r\n};\r\nNgHeadPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [HeadPipe],\r\n        exports: [HeadPipe],\r\n    })\r\n], NgHeadPipeModule);\n\nlet InitialPipe = class InitialPipe {\r\n    transform(input) {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        return input.slice(0, input.length - 1);\r\n    }\r\n};\r\nInitialPipe = __decorate([\r\n    Pipe({\r\n        name: 'initial',\r\n    })\r\n], InitialPipe);\r\nlet NgInitialPipeModule = class NgInitialPipeModule {\r\n};\r\nNgInitialPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [InitialPipe],\r\n        exports: [InitialPipe],\r\n    })\r\n], NgInitialPipeModule);\n\nlet LastPipe = class LastPipe {\r\n    transform(input) {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        // Returns undefined if empty\r\n        return input[input.length - 1];\r\n    }\r\n};\r\nLastPipe = __decorate([\r\n    Pipe({\r\n        name: 'last',\r\n    })\r\n], LastPipe);\r\nlet NgLastPipeModule = class NgLastPipeModule {\r\n};\r\nNgLastPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [LastPipe],\r\n        exports: [LastPipe],\r\n    })\r\n], NgLastPipeModule);\n\nlet JoinPipe = class JoinPipe {\r\n    transform(input, character = '') {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        return input.join(character);\r\n    }\r\n};\r\nJoinPipe = __decorate([\r\n    Pipe({\r\n        name: 'join',\r\n    })\r\n], JoinPipe);\r\nlet NgJoinPipeModule = class NgJoinPipeModule {\r\n};\r\nNgJoinPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [JoinPipe],\r\n        exports: [JoinPipe],\r\n    })\r\n], NgJoinPipeModule);\n\nlet TailPipe = class TailPipe {\r\n    transform(input) {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        return input.slice(1, input.length);\r\n    }\r\n};\r\nTailPipe = __decorate([\r\n    Pipe({\r\n        name: 'tail',\r\n    })\r\n], TailPipe);\r\nlet NgTailPipeModule = class NgTailPipeModule {\r\n};\r\nNgTailPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [TailPipe],\r\n        exports: [TailPipe],\r\n    })\r\n], NgTailPipeModule);\n\nlet UniqPipe = class UniqPipe {\r\n    transform(input) {\r\n        if (!isArray(input) && !isDeepObject(input)) {\r\n            return input;\r\n        }\r\n        if (isDeepObject(input)) {\r\n            const unwrappedInput = unwrapDeep(input);\r\n            if (!isArray(unwrappedInput)) {\r\n                return unwrappedInput;\r\n            }\r\n            return unwrappedInput.filter((value, index) => deepIndexOf(unwrappedInput, value) === index);\r\n        }\r\n        return input.filter((value, index) => input.indexOf(value) === index);\r\n    }\r\n};\r\nUniqPipe = __decorate([\r\n    Pipe({\r\n        name: 'uniq',\r\n    })\r\n], UniqPipe);\r\nlet NgUniqPipeModule = class NgUniqPipeModule {\r\n};\r\nNgUniqPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [UniqPipe],\r\n        exports: [UniqPipe],\r\n    })\r\n], NgUniqPipeModule);\n\nlet WithoutPipe = class WithoutPipe {\r\n    transform(input, ...args) {\r\n        if (!isArray(input) && !isDeepObject(input)) {\r\n            return input;\r\n        }\r\n        if (isDeepObject(input)) {\r\n            const unwrappedInput = unwrapDeep(input);\r\n            if (!isArray(unwrappedInput)) {\r\n                return unwrappedInput;\r\n            }\r\n            return unwrappedInput.filter((value) => deepIndexOf(args, value) === -1);\r\n        }\r\n        return input.filter((value) => args.indexOf(value) === -1);\r\n    }\r\n};\r\nWithoutPipe = __decorate([\r\n    Pipe({\r\n        name: 'without',\r\n    })\r\n], WithoutPipe);\r\nlet NgWithoutPipeModule = class NgWithoutPipeModule {\r\n};\r\nNgWithoutPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [WithoutPipe],\r\n        exports: [WithoutPipe],\r\n    })\r\n], NgWithoutPipeModule);\n\nlet MapPipe = class MapPipe {\r\n    transform(input, fn) {\r\n        if (!isArray(input) || !fn) {\r\n            return input;\r\n        }\r\n        return input.map(fn);\r\n    }\r\n};\r\nMapPipe = __decorate([\r\n    Pipe({\r\n        name: 'map',\r\n    })\r\n], MapPipe);\r\nlet NgMapPipeModule = class NgMapPipeModule {\r\n};\r\nNgMapPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [MapPipe],\r\n        exports: [MapPipe],\r\n    })\r\n], NgMapPipeModule);\n\nlet WherePipe = class WherePipe {\r\n    /**\r\n     * Support a function or a value or the shorthand ['key', value] like the lodash shorthand.\r\n     */\r\n    transform(input, fn) {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        if (isFunction(fn)) {\r\n            return input.filter(fn);\r\n        }\r\n        else if (isArray(fn)) {\r\n            const [key, value] = fn;\r\n            return input.filter((item) => getProperty(item, key) === value);\r\n        }\r\n        else if (fn) {\r\n            return input.filter((item) => item === fn);\r\n        }\r\n        else {\r\n            return input;\r\n        }\r\n    }\r\n};\r\nWherePipe = __decorate([\r\n    Pipe({\r\n        name: 'where',\r\n    })\r\n], WherePipe);\r\nlet NgWherePipeModule = class NgWherePipeModule {\r\n};\r\nNgWherePipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [WherePipe],\r\n        exports: [WherePipe],\r\n    })\r\n], NgWherePipeModule);\n\nvar FirstOrDefaultPipe_1;\r\nlet FirstOrDefaultPipe = FirstOrDefaultPipe_1 = class FirstOrDefaultPipe {\r\n    static find(input, predicate, defaultValue) {\r\n        let found = false;\r\n        let result;\r\n        let i = -1;\r\n        while (!found && ++i < input.length) {\r\n            found = predicate(input[i], i, input);\r\n        }\r\n        if (found) {\r\n            result = input[i];\r\n        }\r\n        if (typeof result === 'undefined' && typeof defaultValue !== 'undefined') {\r\n            result = defaultValue;\r\n        }\r\n        return result;\r\n    }\r\n    transform(input, predicate, defaultValue) {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        if (isFunction(predicate)) {\r\n            return FirstOrDefaultPipe_1.find(input, predicate, defaultValue);\r\n        }\r\n        else if (isArray(predicate)) {\r\n            const [key, value] = predicate;\r\n            return FirstOrDefaultPipe_1.find(input, (item) => getProperty(item, key) === value, defaultValue);\r\n        }\r\n        else if (predicate) {\r\n            return FirstOrDefaultPipe_1.find(input, item => item === predicate, defaultValue);\r\n        }\r\n        else {\r\n            return input;\r\n        }\r\n    }\r\n};\r\nFirstOrDefaultPipe = FirstOrDefaultPipe_1 = __decorate([\r\n    Pipe({\r\n        name: 'firstOrDefault',\r\n    })\r\n], FirstOrDefaultPipe);\r\nlet NgFirstOrDefaultPipeModule = class NgFirstOrDefaultPipeModule {\r\n};\r\nNgFirstOrDefaultPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [FirstOrDefaultPipe],\r\n        exports: [FirstOrDefaultPipe],\r\n    })\r\n], NgFirstOrDefaultPipeModule);\n\nlet RangePipe = class RangePipe {\r\n    transform(_input, size = 0, start = 1, step = 1) {\r\n        const range = [];\r\n        for (let length = 0; length < size; ++length) {\r\n            range.push(start);\r\n            start += step;\r\n        }\r\n        return range;\r\n    }\r\n};\r\nRangePipe = __decorate([\r\n    Pipe({\r\n        name: 'range',\r\n    })\r\n], RangePipe);\r\nlet NgRangePipeModule = class NgRangePipeModule {\r\n};\r\nNgRangePipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [RangePipe],\r\n        exports: [RangePipe],\r\n    })\r\n], NgRangePipeModule);\n\nlet PluckPipe = class PluckPipe {\r\n    transform(input, key) {\r\n        if (!isArray(input) || !key) {\r\n            return input;\r\n        }\r\n        return input.map((value) => {\r\n            return getProperty(value, key);\r\n        });\r\n    }\r\n};\r\nPluckPipe = __decorate([\r\n    Pipe({\r\n        name: 'pluck',\r\n    })\r\n], PluckPipe);\r\nlet NgPluckPipeModule = class NgPluckPipeModule {\r\n};\r\nNgPluckPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [PluckPipe],\r\n        exports: [PluckPipe],\r\n    })\r\n], NgPluckPipeModule);\n\nlet ReversePipe = class ReversePipe {\r\n    transform(input) {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        return [...input].reverse();\r\n    }\r\n};\r\nReversePipe = __decorate([\r\n    Pipe({\r\n        name: 'reverse',\r\n    })\r\n], ReversePipe);\r\nlet NgReversePipeModule = class NgReversePipeModule {\r\n};\r\nNgReversePipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [ReversePipe],\r\n        exports: [ReversePipe],\r\n    })\r\n], NgReversePipeModule);\n\nvar OrderByPipe_1;\r\nlet OrderByPipe = OrderByPipe_1 = class OrderByPipe {\r\n    static _orderBy(a, b) {\r\n        if (a instanceof Date && b instanceof Date) {\r\n            return a < b ? -1 : a > b ? 1 : 0;\r\n        }\r\n        const floatA = parseFloat(a);\r\n        const floatB = parseFloat(b);\r\n        if (typeof a === 'string' && typeof b === 'string' && (isNaN(floatA) || isNaN(floatB))) {\r\n            const lowerA = a.toLowerCase();\r\n            const lowerB = b.toLowerCase();\r\n            return lowerA < lowerB ? -1 : lowerA > lowerB ? 1 : 0;\r\n        }\r\n        return floatA < floatB ? -1 : floatA > floatB ? 1 : 0;\r\n    }\r\n    transform(input, config = '+') {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        const configIsArray = isArray(config);\r\n        // If config === 'param' OR ['param']\r\n        if (!configIsArray || (configIsArray && config.length === 1)) {\r\n            const propertyToCheck = configIsArray ? config[0] : config;\r\n            const first = propertyToCheck.substr(0, 1);\r\n            const desc = first === '-'; // First character is '-'\r\n            // Basic array (if only + or - is present)\r\n            if (!propertyToCheck || propertyToCheck === '-' || propertyToCheck === '+') {\r\n                return [...input].sort((a, b) => {\r\n                    const comparator = OrderByPipe_1._orderBy(a, b);\r\n                    return desc ? -comparator : comparator;\r\n                });\r\n            }\r\n            else {\r\n                // If contains + or -, substring the property\r\n                const property = first === '+' || desc ? propertyToCheck.substr(1) : propertyToCheck;\r\n                return [...input].sort((a, b) => {\r\n                    const comparator = OrderByPipe_1._orderBy(a[property], b[property]);\r\n                    return desc ? -comparator : comparator;\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            // Config is an array of property\r\n            return [...input].sort((a, b) => {\r\n                for (let i = 0; i < config.length; ++i) {\r\n                    const first = config[i].substr(0, 1);\r\n                    const desc = first === '-';\r\n                    const property = first === '+' || desc ? config[i].substr(1) : config[i];\r\n                    const comparator = OrderByPipe_1._orderBy(a[property], b[property]);\r\n                    const comparison = desc ? -comparator : comparator;\r\n                    if (comparison !== 0) {\r\n                        return comparison;\r\n                    }\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n    }\r\n};\r\nOrderByPipe = OrderByPipe_1 = __decorate([\r\n    Pipe({\r\n        name: 'orderBy',\r\n    })\r\n], OrderByPipe);\r\nlet NgOrderByPipeModule = class NgOrderByPipeModule {\r\n};\r\nNgOrderByPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [OrderByPipe],\r\n        exports: [OrderByPipe],\r\n    })\r\n], NgOrderByPipeModule);\n\nlet CountPipe = class CountPipe {\r\n    transform(input) {\r\n        return count(input);\r\n    }\r\n};\r\nCountPipe = __decorate([\r\n    Pipe({\r\n        name: 'count',\r\n    })\r\n], CountPipe);\r\nlet NgCountPipeModule = class NgCountPipeModule {\r\n};\r\nNgCountPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [CountPipe],\r\n        exports: [CountPipe],\r\n    })\r\n], NgCountPipeModule);\n\nlet SomePipe = class SomePipe {\r\n    transform(input, predicate) {\r\n        if (!isArray(input) || !predicate) {\r\n            return input;\r\n        }\r\n        let result = false;\r\n        let i = -1;\r\n        while (++i < input.length && !result) {\r\n            result = predicate(input[i], i, input);\r\n        }\r\n        return result;\r\n    }\r\n};\r\nSomePipe = __decorate([\r\n    Pipe({\r\n        name: 'some',\r\n    })\r\n], SomePipe);\r\nlet NgSomePipeModule = class NgSomePipeModule {\r\n};\r\nNgSomePipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [SomePipe],\r\n        exports: [SomePipe],\r\n    })\r\n], NgSomePipeModule);\n\nlet EveryPipe = class EveryPipe {\r\n    transform(input, predicate) {\r\n        return every(input, predicate);\r\n    }\r\n};\r\nEveryPipe = __decorate([\r\n    Pipe({\r\n        name: 'every',\r\n    })\r\n], EveryPipe);\r\nlet NgEveryPipeModule = class NgEveryPipeModule {\r\n};\r\nNgEveryPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [EveryPipe],\r\n        exports: [EveryPipe],\r\n    })\r\n], NgEveryPipeModule);\n\nlet ShufflePipe = class ShufflePipe {\r\n    transform(input) {\r\n        return shuffle(input);\r\n    }\r\n};\r\nShufflePipe = __decorate([\r\n    Pipe({\r\n        name: 'shuffle',\r\n    })\r\n], ShufflePipe);\r\nlet NgShufflePipeModule = class NgShufflePipeModule {\r\n};\r\nNgShufflePipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [ShufflePipe],\r\n        exports: [ShufflePipe],\r\n    })\r\n], NgShufflePipeModule);\n\nlet TakePipe = class TakePipe {\r\n    transform(input, quantity) {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        return input.slice(0, quantity || 1);\r\n    }\r\n};\r\nTakePipe = __decorate([\r\n    Pipe({\r\n        name: 'take',\r\n    })\r\n], TakePipe);\r\nlet NgTakePipeModule = class NgTakePipeModule {\r\n};\r\nNgTakePipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [TakePipe],\r\n        exports: [TakePipe],\r\n    })\r\n], NgTakePipeModule);\n\nlet DropPipe = class DropPipe {\r\n    transform(input, quantity) {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        return input.slice(quantity || 1, input.lenth);\r\n    }\r\n};\r\nDropPipe = __decorate([\r\n    Pipe({\r\n        name: 'drop',\r\n    })\r\n], DropPipe);\r\nlet NgDropPipeModule = class NgDropPipeModule {\r\n};\r\nNgDropPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [DropPipe],\r\n        exports: [DropPipe],\r\n    })\r\n], NgDropPipeModule);\n\nlet DeepPipe = class DeepPipe {\r\n    transform(value) {\r\n        if (isDeepObject(value)) {\r\n            return value;\r\n        }\r\n        return wrapDeep(value);\r\n    }\r\n};\r\nDeepPipe = __decorate([\r\n    Pipe({\r\n        name: 'deep',\r\n    })\r\n], DeepPipe);\r\nlet NgDeepPipeModule = class NgDeepPipeModule {\r\n};\r\nNgDeepPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [DeepPipe],\r\n        exports: [DeepPipe],\r\n    })\r\n], NgDeepPipeModule);\n\nlet ChunkPipe = class ChunkPipe {\r\n    transform(input, size = 1) {\r\n        if (!isArray(input)) {\r\n            return input;\r\n        }\r\n        return [].concat.apply([], input.map((_elem, i) => {\r\n            return i % size ? [] : [input.slice(i, i + size)];\r\n        }));\r\n    }\r\n};\r\nChunkPipe = __decorate([\r\n    Pipe({\r\n        name: 'chunk',\r\n    })\r\n], ChunkPipe);\r\nlet NgChunkPipeModule = class NgChunkPipeModule {\r\n};\r\nNgChunkPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [ChunkPipe],\r\n        exports: [ChunkPipe],\r\n    })\r\n], NgChunkPipeModule);\n\nlet FlattenPipe = class FlattenPipe {\r\n    transform(input) {\r\n        const isDeep = isDeepObject(input);\r\n        if (!isArray(input) && !isDeep) {\r\n            return input;\r\n        }\r\n        if (isDeep) {\r\n            const unwrapped = unwrapDeep(input);\r\n            if (!isArray(unwrapped)) {\r\n                return unwrapped;\r\n            }\r\n            return flatten(unwrapped, 0);\r\n        }\r\n        return [].concat.apply([], input);\r\n    }\r\n};\r\nFlattenPipe = __decorate([\r\n    Pipe({ name: 'flatten' })\r\n], FlattenPipe);\r\nlet NgFlattenPipeModule = class NgFlattenPipeModule {\r\n};\r\nNgFlattenPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [FlattenPipe],\r\n        exports: [FlattenPipe],\r\n    })\r\n], NgFlattenPipeModule);\n\nlet IntersectionPipe = class IntersectionPipe {\r\n    transform(a, b) {\r\n        if ((!isArray(a) && !isDeepObject(a)) || !isArray(b)) {\r\n            return [];\r\n        }\r\n        if (isDeepObject(a)) {\r\n            const unwrapped = unwrapDeep(a);\r\n            if (!isArray(unwrapped)) {\r\n                return [];\r\n            }\r\n            return unwrapped.reduce((intersection, value) => intersection.concat(deepIndexOf(b, value) !== -1 && deepIndexOf(intersection, value) === -1 ? value : []), []);\r\n        }\r\n        return a.reduce((intersection, value) => intersection.concat(b.indexOf(value) !== -1 && intersection.indexOf(value) === -1 ? value : []), []);\r\n    }\r\n};\r\nIntersectionPipe = __decorate([\r\n    Pipe({\r\n        name: 'intersection',\r\n    })\r\n], IntersectionPipe);\r\nlet NgIntersectionPipeModule = class NgIntersectionPipeModule {\r\n};\r\nNgIntersectionPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IntersectionPipe],\r\n        exports: [IntersectionPipe],\r\n    })\r\n], NgIntersectionPipeModule);\n\nlet UnionPipe = class UnionPipe {\r\n    transform(a, b) {\r\n        if ((!isArray(a) && !isDeepObject(a)) || !isArray(b)) {\r\n            return [];\r\n        }\r\n        if (isDeepObject(a)) {\r\n            const unwrapped = unwrapDeep(a);\r\n            if (!isArray(unwrapped)) {\r\n                return [];\r\n            }\r\n            return []\r\n                .concat(unwrapped)\r\n                .concat(b)\r\n                .filter((value, index, input) => deepIndexOf(input, value) === index);\r\n        }\r\n        return []\r\n            .concat(a)\r\n            .concat(b)\r\n            .filter((value, index, input) => input.indexOf(value) === index);\r\n    }\r\n};\r\nUnionPipe = __decorate([\r\n    Pipe({\r\n        name: 'union',\r\n    })\r\n], UnionPipe);\r\nlet NgUnionPipeModule = class NgUnionPipeModule {\r\n};\r\nNgUnionPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [UnionPipe],\r\n        exports: [UnionPipe],\r\n    })\r\n], NgUnionPipeModule);\n\nlet TakeWhilePipe = class TakeWhilePipe {\r\n    transform(input, predicate) {\r\n        if (!isArray(input) || isNil(predicate)) {\r\n            return input;\r\n        }\r\n        return takeWhile(input, predicate);\r\n    }\r\n};\r\nTakeWhilePipe = __decorate([\r\n    Pipe({\r\n        name: 'takeWhile',\r\n    })\r\n], TakeWhilePipe);\r\nlet NgTakeWhilePipeModule = class NgTakeWhilePipeModule {\r\n};\r\nNgTakeWhilePipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [TakeWhilePipe],\r\n        exports: [TakeWhilePipe],\r\n    })\r\n], NgTakeWhilePipeModule);\n\nlet TakeUntilPipe = class TakeUntilPipe {\r\n    transform(input, predicate) {\r\n        if (!isArray(input) || isNil(predicate)) {\r\n            return input;\r\n        }\r\n        return takeUntil(input, predicate);\r\n    }\r\n};\r\nTakeUntilPipe = __decorate([\r\n    Pipe({\r\n        name: 'takeUntil',\r\n    })\r\n], TakeUntilPipe);\r\nlet NgTakeUntilPipeModule = class NgTakeUntilPipeModule {\r\n};\r\nNgTakeUntilPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [TakeUntilPipe],\r\n        exports: [TakeUntilPipe],\r\n    })\r\n], NgTakeUntilPipeModule);\n\nlet NgArrayPipesModule = class NgArrayPipesModule {\r\n};\r\nNgArrayPipesModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            NgChunkPipeModule,\r\n            NgCountPipeModule,\r\n            NgDeepPipeModule,\r\n            NgDropPipeModule,\r\n            NgEmptyPipeModule,\r\n            NgEveryPipeModule,\r\n            NgFirstOrDefaultPipeModule,\r\n            NgFlattenPipeModule,\r\n            NgHeadPipeModule,\r\n            NgInitialPipeModule,\r\n            NgIntersectionPipeModule,\r\n            NgJoinPipeModule,\r\n            NgLastPipeModule,\r\n            NgMapPipeModule,\r\n            NgOrderByPipeModule,\r\n            NgPluckPipeModule,\r\n            NgRangePipeModule,\r\n            NgReversePipeModule,\r\n            NgShufflePipeModule,\r\n            NgSomePipeModule,\r\n            NgTailPipeModule,\r\n            NgTakeUntilPipeModule,\r\n            NgTakeWhilePipeModule,\r\n            NgTakePipeModule,\r\n            NgUnionPipeModule,\r\n            NgUniqPipeModule,\r\n            NgWherePipeModule,\r\n            NgWithoutPipeModule,\r\n        ],\r\n    })\r\n], NgArrayPipesModule);\n\nlet IsEqualPipe = class IsEqualPipe {\r\n    transform(first, second) {\r\n        return first == second;\r\n    }\r\n};\r\nIsEqualPipe = __decorate([\r\n    Pipe({\r\n        name: 'equal',\r\n    })\r\n], IsEqualPipe);\r\nlet NgIsEqualPipeModule = class NgIsEqualPipeModule {\r\n};\r\nNgIsEqualPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsEqualPipe],\r\n        exports: [IsEqualPipe],\r\n    })\r\n], NgIsEqualPipeModule);\n\nlet IsGreaterOrEqualPipe = class IsGreaterOrEqualPipe {\r\n    transform(first, second) {\r\n        return first >= second;\r\n    }\r\n};\r\nIsGreaterOrEqualPipe = __decorate([\r\n    Pipe({\r\n        name: 'greaterOrEqual',\r\n    })\r\n], IsGreaterOrEqualPipe);\r\nlet NgIsGreaterOrEqualPipeModule = class NgIsGreaterOrEqualPipeModule {\r\n};\r\nNgIsGreaterOrEqualPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsGreaterOrEqualPipe],\r\n        exports: [IsGreaterOrEqualPipe],\r\n    })\r\n], NgIsGreaterOrEqualPipeModule);\n\nlet IsGreaterPipe = class IsGreaterPipe {\r\n    transform(first, second) {\r\n        return first > second;\r\n    }\r\n};\r\nIsGreaterPipe = __decorate([\r\n    Pipe({\r\n        name: 'greater',\r\n    })\r\n], IsGreaterPipe);\r\nlet NgIsGreaterPipeModule = class NgIsGreaterPipeModule {\r\n};\r\nNgIsGreaterPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsGreaterPipe],\r\n        exports: [IsGreaterPipe],\r\n    })\r\n], NgIsGreaterPipeModule);\n\nlet IsIdenticalPipe = class IsIdenticalPipe {\r\n    transform(first, second) {\r\n        return first === second;\r\n    }\r\n};\r\nIsIdenticalPipe = __decorate([\r\n    Pipe({\r\n        name: 'identical',\r\n    })\r\n], IsIdenticalPipe);\r\nlet NgIsIdenticalPipeModule = class NgIsIdenticalPipeModule {\r\n};\r\nNgIsIdenticalPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsIdenticalPipe],\r\n        exports: [IsIdenticalPipe],\r\n    })\r\n], NgIsIdenticalPipeModule);\n\nlet IsLessOrEqualPipe = class IsLessOrEqualPipe {\r\n    transform(first, second) {\r\n        return first <= second;\r\n    }\r\n};\r\nIsLessOrEqualPipe = __decorate([\r\n    Pipe({\r\n        name: 'lessOrEqual',\r\n    })\r\n], IsLessOrEqualPipe);\r\nlet NgIsLessOrEqualPipeModule = class NgIsLessOrEqualPipeModule {\r\n};\r\nNgIsLessOrEqualPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsLessOrEqualPipe],\r\n        exports: [IsLessOrEqualPipe],\r\n    })\r\n], NgIsLessOrEqualPipeModule);\n\nlet IsLessPipe = class IsLessPipe {\r\n    transform(first, second) {\r\n        return first < second;\r\n    }\r\n};\r\nIsLessPipe = __decorate([\r\n    Pipe({\r\n        name: 'less',\r\n    })\r\n], IsLessPipe);\r\nlet NgIsLessPipeModule = class NgIsLessPipeModule {\r\n};\r\nNgIsLessPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsLessPipe],\r\n        exports: [IsLessPipe],\r\n    })\r\n], NgIsLessPipeModule);\n\nlet IsNotEqualPipe = class IsNotEqualPipe {\r\n    transform(first, second) {\r\n        return first != second;\r\n    }\r\n};\r\nIsNotEqualPipe = __decorate([\r\n    Pipe({\r\n        name: 'notEqual',\r\n    })\r\n], IsNotEqualPipe);\r\nlet NgIsNotEqualPipeModule = class NgIsNotEqualPipeModule {\r\n};\r\nNgIsNotEqualPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsNotEqualPipe],\r\n        exports: [IsNotEqualPipe],\r\n    })\r\n], NgIsNotEqualPipeModule);\n\nlet IsNotIdenticalPipe = class IsNotIdenticalPipe {\r\n    transform(first, second) {\r\n        return first !== second;\r\n    }\r\n};\r\nIsNotIdenticalPipe = __decorate([\r\n    Pipe({\r\n        name: 'notIdentical',\r\n    })\r\n], IsNotIdenticalPipe);\r\nlet NgIsNotIdenticalPipeModule = class NgIsNotIdenticalPipeModule {\r\n};\r\nNgIsNotIdenticalPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsNotIdenticalPipe],\r\n        exports: [IsNotIdenticalPipe],\r\n    })\r\n], NgIsNotIdenticalPipeModule);\n\nlet IsNullPipe = class IsNullPipe {\r\n    transform(value) {\r\n        return isNull(value);\r\n    }\r\n};\r\nIsNullPipe = __decorate([\r\n    Pipe({\r\n        name: 'isNull',\r\n    })\r\n], IsNullPipe);\r\nlet NgIsNullPipeModule = class NgIsNullPipeModule {\r\n};\r\nNgIsNullPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsNullPipe],\r\n        exports: [IsNullPipe],\r\n    })\r\n], NgIsNullPipeModule);\n\nlet IsUndefinedPipe = class IsUndefinedPipe {\r\n    transform(value) {\r\n        return isUndefined(value);\r\n    }\r\n};\r\nIsUndefinedPipe = __decorate([\r\n    Pipe({\r\n        name: 'isUndefined',\r\n    })\r\n], IsUndefinedPipe);\r\nlet NgIsUndefinedPipeModule = class NgIsUndefinedPipeModule {\r\n};\r\nNgIsUndefinedPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsUndefinedPipe],\r\n        exports: [IsUndefinedPipe],\r\n    })\r\n], NgIsUndefinedPipeModule);\n\nlet IsNilPipe = class IsNilPipe {\r\n    transform(value) {\r\n        return isNil(value);\r\n    }\r\n};\r\nIsNilPipe = __decorate([\r\n    Pipe({\r\n        name: 'isNil',\r\n    })\r\n], IsNilPipe);\r\nlet NgIsNilPipeModule = class NgIsNilPipeModule {\r\n};\r\nNgIsNilPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsNilPipe],\r\n        exports: [IsNilPipe],\r\n    })\r\n], NgIsNilPipeModule);\n\nlet IsFunctionPipe = class IsFunctionPipe {\r\n    transform(value) {\r\n        return isFunction(value);\r\n    }\r\n};\r\nIsFunctionPipe = __decorate([\r\n    Pipe({\r\n        name: 'isFunction',\r\n    })\r\n], IsFunctionPipe);\r\nlet NgIsFunctionPipeModule = class NgIsFunctionPipeModule {\r\n};\r\nNgIsFunctionPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsFunctionPipe],\r\n        exports: [IsFunctionPipe],\r\n    })\r\n], NgIsFunctionPipeModule);\n\nlet IsNumberPipe = class IsNumberPipe {\r\n    transform(value) {\r\n        return isNumber(value);\r\n    }\r\n};\r\nIsNumberPipe = __decorate([\r\n    Pipe({\r\n        name: 'isNumber',\r\n    })\r\n], IsNumberPipe);\r\nlet NgIsNumberPipeModule = class NgIsNumberPipeModule {\r\n};\r\nNgIsNumberPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsNumberPipe],\r\n        exports: [IsNumberPipe],\r\n    })\r\n], NgIsNumberPipeModule);\n\nlet IsStringPipe = class IsStringPipe {\r\n    transform(value) {\r\n        return isString(value);\r\n    }\r\n};\r\nIsStringPipe = __decorate([\r\n    Pipe({\r\n        name: 'isString',\r\n    })\r\n], IsStringPipe);\r\nlet NgIsStringPipeModule = class NgIsStringPipeModule {\r\n};\r\nNgIsStringPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsStringPipe],\r\n        exports: [IsStringPipe],\r\n    })\r\n], NgIsStringPipeModule);\n\nlet IsArrayPipe = class IsArrayPipe {\r\n    transform(value) {\r\n        return isArray(value);\r\n    }\r\n};\r\nIsArrayPipe = __decorate([\r\n    Pipe({\r\n        name: 'isArray',\r\n    })\r\n], IsArrayPipe);\r\nlet NgIsArrayPipeModule = class NgIsArrayPipeModule {\r\n};\r\nNgIsArrayPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsArrayPipe],\r\n        exports: [IsArrayPipe],\r\n    })\r\n], NgIsArrayPipeModule);\n\nlet IsObjectPipe = class IsObjectPipe {\r\n    transform(value) {\r\n        return isObject(value);\r\n    }\r\n};\r\nIsObjectPipe = __decorate([\r\n    Pipe({\r\n        name: 'isObject',\r\n    })\r\n], IsObjectPipe);\r\nlet NgIsObjectPipeModule = class NgIsObjectPipeModule {\r\n};\r\nNgIsObjectPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsObjectPipe],\r\n        exports: [IsObjectPipe],\r\n    })\r\n], NgIsObjectPipeModule);\n\nlet IsDefinedPipe = class IsDefinedPipe {\r\n    transform(value) {\r\n        return !isUndefined(value);\r\n    }\r\n};\r\nIsDefinedPipe = __decorate([\r\n    Pipe({\r\n        name: 'isDefined',\r\n    })\r\n], IsDefinedPipe);\r\nlet NgIsDefinedPipeModule = class NgIsDefinedPipeModule {\r\n};\r\nNgIsDefinedPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [IsDefinedPipe],\r\n        exports: [IsDefinedPipe],\r\n    })\r\n], NgIsDefinedPipeModule);\n\nlet NgTypesPipesModule = class NgTypesPipesModule {\r\n};\r\nNgTypesPipesModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            NgIsNullPipeModule,\r\n            NgIsUndefinedPipeModule,\r\n            NgIsNilPipeModule,\r\n            NgIsFunctionPipeModule,\r\n            NgIsNumberPipeModule,\r\n            NgIsStringPipeModule,\r\n            NgIsArrayPipeModule,\r\n            NgIsObjectPipeModule,\r\n            NgIsDefinedPipeModule,\r\n        ],\r\n    })\r\n], NgTypesPipesModule);\r\nlet NgConditionsPipesModule = class NgConditionsPipesModule {\r\n};\r\nNgConditionsPipesModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            NgIsEqualPipeModule,\r\n            NgIsGreaterOrEqualPipeModule,\r\n            NgIsGreaterPipeModule,\r\n            NgIsIdenticalPipeModule,\r\n            NgIsLessOrEqualPipeModule,\r\n            NgIsLessPipeModule,\r\n            NgIsNotEqualPipeModule,\r\n            NgIsNotIdenticalPipeModule,\r\n        ],\r\n    })\r\n], NgConditionsPipesModule);\r\nlet NgBooleanPipesModule = class NgBooleanPipesModule {\r\n};\r\nNgBooleanPipesModule = __decorate([\r\n    NgModule({\r\n        imports: [NgConditionsPipesModule, NgTypesPipesModule],\r\n    })\r\n], NgBooleanPipesModule);\n\nvar BytesPipe_1;\r\nlet BytesPipe = BytesPipe_1 = class BytesPipe {\r\n    transform(input, decimal = 0, from = 'B', to) {\r\n        if (!(isNumberFinite(input) && isNumberFinite(decimal) && isInteger(decimal) && isPositive(decimal))) {\r\n            return input;\r\n        }\r\n        let bytes = input;\r\n        let unit = from;\r\n        while (unit !== 'B') {\r\n            bytes *= 1024;\r\n            unit = BytesPipe_1.formats[unit].prev;\r\n        }\r\n        if (to) {\r\n            const format = BytesPipe_1.formats[to];\r\n            const result = toDecimal(BytesPipe_1.calculateResult(format, bytes), decimal);\r\n            return BytesPipe_1.formatResult(result, to);\r\n        }\r\n        for (const key in BytesPipe_1.formats) {\r\n            if (BytesPipe_1.formats.hasOwnProperty(key)) {\r\n                const format = BytesPipe_1.formats[key];\r\n                if (bytes < format.max) {\r\n                    const result = toDecimal(BytesPipe_1.calculateResult(format, bytes), decimal);\r\n                    return BytesPipe_1.formatResult(result, key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static formatResult(result, unit) {\r\n        return `${result} ${unit}`;\r\n    }\r\n    static calculateResult(format, bytes) {\r\n        const prev = format.prev ? BytesPipe_1.formats[format.prev] : undefined;\r\n        return prev ? bytes / prev.max : bytes;\r\n    }\r\n};\r\nBytesPipe.formats = {\r\n    B: { max: 1024 },\r\n    kB: { max: Math.pow(1024, 2), prev: 'B' },\r\n    KB: { max: Math.pow(1024, 2), prev: 'B' },\r\n    MB: { max: Math.pow(1024, 3), prev: 'kB' },\r\n    GB: { max: Math.pow(1024, 4), prev: 'MB' },\r\n    TB: { max: Number.MAX_SAFE_INTEGER, prev: 'GB' },\r\n};\r\nBytesPipe = BytesPipe_1 = __decorate([\r\n    Pipe({\r\n        name: 'bytes',\r\n    })\r\n], BytesPipe);\r\nlet NgBytesPipeModule = class NgBytesPipeModule {\r\n};\r\nNgBytesPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [BytesPipe],\r\n        exports: [BytesPipe],\r\n    })\r\n], NgBytesPipeModule);\n\nlet CeilPipe = class CeilPipe {\r\n    transform(value, precision = 0) {\r\n        if (isString(precision)) {\r\n            precision = parseInt(precision);\r\n        }\r\n        return createRound('ceil')(value, precision);\r\n    }\r\n};\r\nCeilPipe = __decorate([\r\n    Pipe({\r\n        name: 'ceil',\r\n    })\r\n], CeilPipe);\r\nlet NgCeilPipeModule = class NgCeilPipeModule {\r\n};\r\nNgCeilPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [CeilPipe],\r\n        exports: [CeilPipe],\r\n    })\r\n], NgCeilPipeModule);\n\nlet FloorPipe = class FloorPipe {\r\n    transform(value, precision = 0) {\r\n        if (isString(precision)) {\r\n            precision = parseInt(precision);\r\n        }\r\n        return createRound('floor')(value, precision);\r\n    }\r\n};\r\nFloorPipe = __decorate([\r\n    Pipe({\r\n        name: 'floor',\r\n    })\r\n], FloorPipe);\r\nlet NgFloorPipeModule = class NgFloorPipeModule {\r\n};\r\nNgFloorPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [FloorPipe],\r\n        exports: [FloorPipe],\r\n    })\r\n], NgFloorPipeModule);\n\nlet RoundPipe = class RoundPipe {\r\n    transform(value, precision = 0) {\r\n        if (isString(precision)) {\r\n            precision = parseInt(precision);\r\n        }\r\n        return createRound('round')(value, precision);\r\n    }\r\n};\r\nRoundPipe = __decorate([\r\n    Pipe({\r\n        name: 'round',\r\n    })\r\n], RoundPipe);\r\nlet NgRoundPipeModule = class NgRoundPipeModule {\r\n};\r\nNgRoundPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [RoundPipe],\r\n        exports: [RoundPipe],\r\n    })\r\n], NgRoundPipeModule);\n\nlet DegreesPipe = class DegreesPipe {\r\n    transform(input) {\r\n        if (!isNumberFinite(input)) {\r\n            return 'NaN';\r\n        }\r\n        return (input * 180) / Math.PI;\r\n    }\r\n};\r\nDegreesPipe = __decorate([\r\n    Pipe({\r\n        name: 'degrees',\r\n    })\r\n], DegreesPipe);\r\nlet NgDegreesPipeModule = class NgDegreesPipeModule {\r\n};\r\nNgDegreesPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [DegreesPipe],\r\n        exports: [DegreesPipe],\r\n    })\r\n], NgDegreesPipeModule);\n\nlet RadiansPipe = class RadiansPipe {\r\n    transform(input) {\r\n        if (!isNumberFinite(input)) {\r\n            return 'NaN';\r\n        }\r\n        return (input * Math.PI) / 180;\r\n    }\r\n};\r\nRadiansPipe = __decorate([\r\n    Pipe({\r\n        name: 'radians',\r\n    })\r\n], RadiansPipe);\r\nlet NgRadiansPipeModule = class NgRadiansPipeModule {\r\n};\r\nNgRadiansPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [RadiansPipe],\r\n        exports: [RadiansPipe],\r\n    })\r\n], NgRadiansPipeModule);\n\nlet RandomPipe = class RandomPipe {\r\n    transform(input, min = 0, max = 1) {\r\n        if (!isNumberFinite(min) || !isNumberFinite(max)) {\r\n            return input;\r\n        }\r\n        if (min > max) {\r\n            max = min;\r\n            min = 0;\r\n        }\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n};\r\nRandomPipe = __decorate([\r\n    Pipe({\r\n        name: 'random',\r\n    })\r\n], RandomPipe);\r\nlet NgRandomPipeModule = class NgRandomPipeModule {\r\n};\r\nNgRandomPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [RandomPipe],\r\n        exports: [RandomPipe],\r\n    })\r\n], NgRandomPipeModule);\n\nlet SqrtPipe = class SqrtPipe {\r\n    transform(input) {\r\n        if (!isNumberFinite(input)) {\r\n            return 'NaN';\r\n        }\r\n        return Math.sqrt(input);\r\n    }\r\n};\r\nSqrtPipe = __decorate([\r\n    Pipe({\r\n        name: 'sqrt',\r\n    })\r\n], SqrtPipe);\r\nlet NgSqrtPipeModule = class NgSqrtPipeModule {\r\n};\r\nNgSqrtPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [SqrtPipe],\r\n        exports: [SqrtPipe],\r\n    })\r\n], NgSqrtPipeModule);\n\nlet PowPipe = class PowPipe {\r\n    transform(input, power = 2) {\r\n        if (!isNumberFinite(input)) {\r\n            return 'NaN';\r\n        }\r\n        return Math.pow(input, power);\r\n    }\r\n};\r\nPowPipe = __decorate([\r\n    Pipe({\r\n        name: 'pow',\r\n    })\r\n], PowPipe);\r\nlet NgPowPipeModule = class NgPowPipeModule {\r\n};\r\nNgPowPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [PowPipe],\r\n        exports: [PowPipe],\r\n    })\r\n], NgPowPipeModule);\n\nlet AbsPipe = class AbsPipe {\r\n    transform(input) {\r\n        if (!isNumberFinite(input)) {\r\n            return 'NaN';\r\n        }\r\n        return Math.abs(input);\r\n    }\r\n};\r\nAbsPipe = __decorate([\r\n    Pipe({\r\n        name: 'abs',\r\n    })\r\n], AbsPipe);\r\nlet NgAbsPipeModule = class NgAbsPipeModule {\r\n};\r\nNgAbsPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [AbsPipe],\r\n        exports: [AbsPipe],\r\n    })\r\n], NgAbsPipeModule);\n\nlet OrdinalPipe = class OrdinalPipe {\r\n    transform(input) {\r\n        if (!isNumberFinite(input)) {\r\n            return 'NaN';\r\n        }\r\n        if (this.endsWithTenth(input)) {\r\n            return input + 'th';\r\n        }\r\n        else {\r\n            const cardinal = input.toString().charAt(input.toString().length - 1);\r\n            switch (cardinal) {\r\n                case '1':\r\n                    return input + 'st';\r\n                case '2':\r\n                    return input + 'nd';\r\n                case '3':\r\n                    return input + 'rd';\r\n                default:\r\n                    return input + 'th';\r\n            }\r\n        }\r\n    }\r\n    endsWithTenth(input) {\r\n        const beforeLastDigit = input.toString().charAt(input.toString().length - 2);\r\n        return beforeLastDigit === '1';\r\n    }\r\n};\r\nOrdinalPipe = __decorate([\r\n    Pipe({\r\n        name: 'ordinal',\r\n    })\r\n], OrdinalPipe);\r\nlet NgOrdinalPipeModule = class NgOrdinalPipeModule {\r\n};\r\nNgOrdinalPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [OrdinalPipe],\r\n        exports: [OrdinalPipe],\r\n    })\r\n], NgOrdinalPipeModule);\n\nlet NgMathPipesModule = class NgMathPipesModule {\r\n};\r\nNgMathPipesModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            NgAbsPipeModule,\r\n            NgBytesPipeModule,\r\n            NgCeilPipeModule,\r\n            NgDegreesPipeModule,\r\n            NgFloorPipeModule,\r\n            NgOrdinalPipeModule,\r\n            NgPowPipeModule,\r\n            NgRadiansPipeModule,\r\n            NgRandomPipeModule,\r\n            NgRoundPipeModule,\r\n            NgSqrtPipeModule,\r\n        ],\r\n    })\r\n], NgMathPipesModule);\n\nlet KeysPipe = class KeysPipe {\r\n    transform(input) {\r\n        if (!isObject(input)) {\r\n            return input;\r\n        }\r\n        return Object.keys(input);\r\n    }\r\n};\r\nKeysPipe = __decorate([\r\n    Pipe({ name: 'keys' })\r\n], KeysPipe);\r\nlet NgKeysPipeModule = class NgKeysPipeModule {\r\n};\r\nNgKeysPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [KeysPipe],\r\n        exports: [KeysPipe],\r\n    })\r\n], NgKeysPipeModule);\n\nlet ToArrayPipe = class ToArrayPipe {\r\n    transform(input) {\r\n        if (!isObject(input)) {\r\n            return input;\r\n        }\r\n        return Object.keys(input).map(value => input[value]);\r\n    }\r\n};\r\nToArrayPipe = __decorate([\r\n    Pipe({ name: 'toArray' })\r\n], ToArrayPipe);\r\nlet NgToArrayPipeModule = class NgToArrayPipeModule {\r\n};\r\nNgToArrayPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [ToArrayPipe],\r\n        exports: [ToArrayPipe],\r\n    })\r\n], NgToArrayPipeModule);\n\nlet DefaultsPipe = class DefaultsPipe {\r\n    transform(input, defaults) {\r\n        if (!isObject(defaults)) {\r\n            return input;\r\n        }\r\n        if (isNil(input)) {\r\n            return defaults;\r\n        }\r\n        if (isArray(input)) {\r\n            return input.map((item) => {\r\n                if (isObject(item)) {\r\n                    return Object.assign({}, defaults, item);\r\n                }\r\n                if (isNil(item)) {\r\n                    return defaults;\r\n                }\r\n                return item;\r\n            });\r\n        }\r\n        if (isObject(input)) {\r\n            return Object.assign({}, defaults, input);\r\n        }\r\n        return input;\r\n    }\r\n};\r\nDefaultsPipe = __decorate([\r\n    Pipe({ name: 'defaults' })\r\n], DefaultsPipe);\r\nlet NgDefaultsPipeModule = class NgDefaultsPipeModule {\r\n};\r\nNgDefaultsPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [DefaultsPipe],\r\n        exports: [DefaultsPipe],\r\n    })\r\n], NgDefaultsPipeModule);\n\nlet NgObjectPipesModule = class NgObjectPipesModule {\r\n};\r\nNgObjectPipesModule = __decorate([\r\n    NgModule({\r\n        imports: [NgKeysPipeModule, NgToArrayPipeModule, NgDefaultsPipeModule],\r\n    })\r\n], NgObjectPipesModule);\n\nlet LeftPadPipe = class LeftPadPipe {\r\n    transform(input, length = 0, character = ' ') {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        return leftPad(input, length, character);\r\n    }\r\n};\r\nLeftPadPipe = __decorate([\r\n    Pipe({\r\n        name: 'leftpad',\r\n    })\r\n], LeftPadPipe);\r\nlet NgLeftPadPipeModule = class NgLeftPadPipeModule {\r\n};\r\nNgLeftPadPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [LeftPadPipe],\r\n        exports: [LeftPadPipe],\r\n    })\r\n], NgLeftPadPipeModule);\n\nlet MatchPipe = class MatchPipe {\r\n    transform(input, pattern, flag) {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        const regexp = pattern instanceof RegExp ? pattern : new RegExp(pattern, flag);\r\n        return input.match(regexp);\r\n    }\r\n};\r\nMatchPipe = __decorate([\r\n    Pipe({\r\n        name: 'match',\r\n    })\r\n], MatchPipe);\r\nlet NgMatchPipeModule = class NgMatchPipeModule {\r\n};\r\nNgMatchPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [MatchPipe],\r\n        exports: [MatchPipe],\r\n    })\r\n], NgMatchPipeModule);\n\nlet PadPipe = class PadPipe {\r\n    transform(input, length = 0, character = ' ') {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        return pad(input, length, character);\r\n    }\r\n};\r\nPadPipe = __decorate([\r\n    Pipe({\r\n        name: 'pad',\r\n    })\r\n], PadPipe);\r\nlet NgPadPipeModule = class NgPadPipeModule {\r\n};\r\nNgPadPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [PadPipe],\r\n        exports: [PadPipe],\r\n    })\r\n], NgPadPipeModule);\n\nlet ReplacePipe = class ReplacePipe {\r\n    transform(input, pattern, replacement) {\r\n        if (!isString(input) || isUndefined(pattern) || isUndefined(replacement)) {\r\n            return input;\r\n        }\r\n        return input.replace(pattern, replacement);\r\n    }\r\n};\r\nReplacePipe = __decorate([\r\n    Pipe({\r\n        name: 'replace',\r\n    })\r\n], ReplacePipe);\r\nlet NgReplacePipeModule = class NgReplacePipeModule {\r\n};\r\nNgReplacePipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [ReplacePipe],\r\n        exports: [ReplacePipe],\r\n    })\r\n], NgReplacePipeModule);\n\nlet RightPadPipe = class RightPadPipe {\r\n    transform(input, length = 0, character = ' ') {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        return rightPad(input, length, character);\r\n    }\r\n};\r\nRightPadPipe = __decorate([\r\n    Pipe({\r\n        name: 'rightpad',\r\n    })\r\n], RightPadPipe);\r\nlet NgRightPadPipeModule = class NgRightPadPipeModule {\r\n};\r\nNgRightPadPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [RightPadPipe],\r\n        exports: [RightPadPipe],\r\n    })\r\n], NgRightPadPipeModule);\n\nlet SplitPipe = class SplitPipe {\r\n    transform(input, separator = ' ', limit) {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        return input.split(separator, limit);\r\n    }\r\n};\r\nSplitPipe = __decorate([\r\n    Pipe({\r\n        name: 'split',\r\n    })\r\n], SplitPipe);\r\nlet NgSplitPipeModule = class NgSplitPipeModule {\r\n};\r\nNgSplitPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [SplitPipe],\r\n        exports: [SplitPipe],\r\n    })\r\n], NgSplitPipeModule);\n\nlet TestPipe = class TestPipe {\r\n    transform(input, pattern, flag) {\r\n        if (!isString(input) || !pattern) {\r\n            return input;\r\n        }\r\n        const regexp = pattern instanceof RegExp ? pattern : new RegExp(pattern, flag);\r\n        return regexp.test(input);\r\n    }\r\n};\r\nTestPipe = __decorate([\r\n    Pipe({\r\n        name: 'test',\r\n    })\r\n], TestPipe);\r\nlet NgTestPipeModule = class NgTestPipeModule {\r\n};\r\nNgTestPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [TestPipe],\r\n        exports: [TestPipe],\r\n    })\r\n], NgTestPipeModule);\n\nlet TrimPipe = class TrimPipe {\r\n    transform(input) {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        return input.trim();\r\n    }\r\n};\r\nTrimPipe = __decorate([\r\n    Pipe({\r\n        name: 'trim',\r\n    })\r\n], TrimPipe);\r\nlet NgTrimPipeModule = class NgTrimPipeModule {\r\n};\r\nNgTrimPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [TrimPipe],\r\n        exports: [TrimPipe],\r\n    })\r\n], NgTrimPipeModule);\n\nlet NewlinesPipe = class NewlinesPipe {\r\n    transform(input) {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        return input.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\r\n    }\r\n};\r\nNewlinesPipe = __decorate([\r\n    Pipe({\r\n        name: 'newlines',\r\n    })\r\n], NewlinesPipe);\r\nlet NgNewlinesPipeModule = class NgNewlinesPipeModule {\r\n};\r\nNgNewlinesPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [NewlinesPipe],\r\n        exports: [NewlinesPipe],\r\n    })\r\n], NgNewlinesPipeModule);\n\nlet CapitalizePipe = class CapitalizePipe {\r\n    transform(input, all = false) {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        if (!all) {\r\n            return upperFirst(input.toLowerCase());\r\n        }\r\n        else {\r\n            return input\r\n                .toLowerCase()\r\n                .split(' ')\r\n                .map((value) => upperFirst(value))\r\n                .join(' ');\r\n        }\r\n    }\r\n};\r\nCapitalizePipe = __decorate([\r\n    Pipe({\r\n        name: 'capitalize',\r\n    })\r\n], CapitalizePipe);\r\nlet NgCapitalizePipeModule = class NgCapitalizePipeModule {\r\n};\r\nNgCapitalizePipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [CapitalizePipe],\r\n        exports: [CapitalizePipe],\r\n    })\r\n], NgCapitalizePipeModule);\n\nlet UpperFirstPipe = class UpperFirstPipe {\r\n    transform(input) {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        return upperFirst(input);\r\n    }\r\n};\r\nUpperFirstPipe = __decorate([\r\n    Pipe({\r\n        name: 'upperfirst',\r\n    })\r\n], UpperFirstPipe);\r\nlet NgUpperFirstPipeModule = class NgUpperFirstPipeModule {\r\n};\r\nNgUpperFirstPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [UpperFirstPipe],\r\n        exports: [UpperFirstPipe],\r\n    })\r\n], NgUpperFirstPipeModule);\n\nlet TemplatePipe = class TemplatePipe {\r\n    transform(input, ...args) {\r\n        if (!isString(input) || args.length === 0) {\r\n            return input;\r\n        }\r\n        let template = input;\r\n        for (let i = 0; i < args.length; ++i) {\r\n            template = template.replace(`$${i + 1}`, args[i]);\r\n        }\r\n        return template;\r\n    }\r\n};\r\nTemplatePipe = __decorate([\r\n    Pipe({\r\n        name: 'template',\r\n    })\r\n], TemplatePipe);\r\nlet NgTemplatePipeModule = class NgTemplatePipeModule {\r\n};\r\nNgTemplatePipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [TemplatePipe],\r\n        exports: [TemplatePipe],\r\n    })\r\n], NgTemplatePipeModule);\n\nlet EncodeURIPipe = class EncodeURIPipe {\r\n    transform(input) {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        return encodeURI(input);\r\n    }\r\n};\r\nEncodeURIPipe = __decorate([\r\n    Pipe({\r\n        name: 'encodeURI',\r\n    })\r\n], EncodeURIPipe);\r\nlet NgEncodeURIPipeModule = class NgEncodeURIPipeModule {\r\n};\r\nNgEncodeURIPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [EncodeURIPipe],\r\n        exports: [EncodeURIPipe],\r\n    })\r\n], NgEncodeURIPipeModule);\n\nlet EncodeURIComponentPipe = class EncodeURIComponentPipe {\r\n    transform(input) {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        return encodeURIComponent(input);\r\n    }\r\n};\r\nEncodeURIComponentPipe = __decorate([\r\n    Pipe({\r\n        name: 'encodeURIComponent',\r\n    })\r\n], EncodeURIComponentPipe);\r\nlet NgEncodeURIComponentPipeModule = class NgEncodeURIComponentPipeModule {\r\n};\r\nNgEncodeURIComponentPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [EncodeURIComponentPipe],\r\n        exports: [EncodeURIComponentPipe],\r\n    })\r\n], NgEncodeURIComponentPipeModule);\n\nlet DecodeURIPipe = class DecodeURIPipe {\r\n    transform(input) {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        return decodeURI(input);\r\n    }\r\n};\r\nDecodeURIPipe = __decorate([\r\n    Pipe({\r\n        name: 'decodeURI',\r\n    })\r\n], DecodeURIPipe);\r\nlet NgDecodeURIPipeModule = class NgDecodeURIPipeModule {\r\n};\r\nNgDecodeURIPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [DecodeURIPipe],\r\n        exports: [DecodeURIPipe],\r\n    })\r\n], NgDecodeURIPipeModule);\n\nlet DecodeURIComponentPipe = class DecodeURIComponentPipe {\r\n    transform(input) {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        return decodeURIComponent(input);\r\n    }\r\n};\r\nDecodeURIComponentPipe = __decorate([\r\n    Pipe({\r\n        name: 'decodeURIComponent',\r\n    })\r\n], DecodeURIComponentPipe);\r\nlet NgDecodeURIComponentPipeModule = class NgDecodeURIComponentPipeModule {\r\n};\r\nNgDecodeURIComponentPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [DecodeURIComponentPipe],\r\n        exports: [DecodeURIComponentPipe],\r\n    })\r\n], NgDecodeURIComponentPipeModule);\n\n// Inspired from https://github.com/a8m/angular-filter/blob/master/src/_filter/string/truncate.js\r\nlet TruncatePipe = class TruncatePipe {\r\n    transform(input, length, suffix, preserve) {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        length = isUndefined(length) ? input.length : length;\r\n        if (input.length <= length) {\r\n            return input;\r\n        }\r\n        preserve = preserve || false;\r\n        suffix = suffix || '';\r\n        let index = length;\r\n        if (preserve) {\r\n            if (input.indexOf(' ', length) === -1) {\r\n                index = input.length;\r\n            }\r\n            else {\r\n                index = input.indexOf(' ', length);\r\n            }\r\n        }\r\n        return input.substring(0, index) + suffix;\r\n    }\r\n};\r\nTruncatePipe = __decorate([\r\n    Pipe({\r\n        name: 'truncate',\r\n    })\r\n], TruncatePipe);\r\nlet NgTruncatePipeModule = class NgTruncatePipeModule {\r\n};\r\nNgTruncatePipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [TruncatePipe],\r\n        exports: [TruncatePipe],\r\n    })\r\n], NgTruncatePipeModule);\n\nlet RepeatPipe = class RepeatPipe {\r\n    transform(input, times = 1, characters = '') {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        if (times <= 0) {\r\n            times = 1;\r\n        }\r\n        const repeated = [input];\r\n        for (let i = 1; i < times; ++i) {\r\n            repeated.push(input);\r\n        }\r\n        return repeated.join(characters);\r\n    }\r\n};\r\nRepeatPipe = __decorate([\r\n    Pipe({\r\n        name: 'repeat',\r\n    })\r\n], RepeatPipe);\r\nlet NgRepeatPipeModule = class NgRepeatPipeModule {\r\n};\r\nNgRepeatPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [RepeatPipe],\r\n        exports: [RepeatPipe],\r\n    })\r\n], NgRepeatPipeModule);\n\nlet SlugifyPipe = class SlugifyPipe {\r\n    transform(input) {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        return input\r\n            .toLowerCase()\r\n            .trim()\r\n            .replace(/[^a-z0-9\\s-]/g, ' ')\r\n            .replace(/[\\s-]+/g, '-');\r\n    }\r\n};\r\nSlugifyPipe = __decorate([\r\n    Pipe({ name: 'slugify' })\r\n], SlugifyPipe);\r\nlet NgSlugifyPipeModule = class NgSlugifyPipeModule {\r\n};\r\nNgSlugifyPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [SlugifyPipe],\r\n        exports: [SlugifyPipe],\r\n    })\r\n], NgSlugifyPipeModule);\n\n// idea from https://github.com/a8m/angular-filter\r\nlet StripTagsPipe = class StripTagsPipe {\r\n    transform(input) {\r\n        if (!isString(input) || isUndefined(input))\r\n            return input;\r\n        return input.replace(/<\\S[^><]*>/g, '');\r\n    }\r\n};\r\nStripTagsPipe = __decorate([\r\n    Pipe({\r\n        name: 'stripTags',\r\n    })\r\n], StripTagsPipe);\r\nlet NgStripTagsPipeModule = class NgStripTagsPipeModule {\r\n};\r\nNgStripTagsPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [StripTagsPipe],\r\n        exports: [StripTagsPipe],\r\n    })\r\n], NgStripTagsPipeModule);\n\n// idea from https://github.com/a8m/angular-filter\r\nlet LatinizePipe = class LatinizePipe {\r\n    transform(input) {\r\n        if (!isString(input) || isUndefined(input)) {\r\n            return input;\r\n        }\r\n        let replacementList = [\r\n            { base: ' ', chars: '\\u00A0' },\r\n            { base: '0', chars: '\\u07C0' },\r\n            {\r\n                base: 'A',\r\n                chars: '\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F',\r\n            },\r\n            { base: 'AA', chars: '\\uA732' },\r\n            { base: 'AE', chars: '\\u00C6\\u01FC\\u01E2' },\r\n            { base: 'AO', chars: '\\uA734' },\r\n            { base: 'AU', chars: '\\uA736' },\r\n            { base: 'AV', chars: '\\uA738\\uA73A' },\r\n            { base: 'AY', chars: '\\uA73C' },\r\n            { base: 'B', chars: '\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0181' },\r\n            { base: 'C', chars: '\\u24b8\\uff23\\uA73E\\u1E08\\u0106\\u0043\\u0108\\u010A\\u010C\\u00C7\\u0187\\u023B' },\r\n            { base: 'D', chars: '\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018A\\u0189\\u1D05\\uA779' },\r\n            { base: 'Dh', chars: '\\u00D0' },\r\n            { base: 'DZ', chars: '\\u01F1\\u01C4' },\r\n            { base: 'Dz', chars: '\\u01F2\\u01C5' },\r\n            {\r\n                base: 'E',\r\n                chars: '\\u025B\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E\\u1D07',\r\n            },\r\n            { base: 'F', chars: '\\uA77C\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B' },\r\n            {\r\n                base: 'G',\r\n                chars: '\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E\\u0262',\r\n            },\r\n            { base: 'H', chars: '\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D' },\r\n            {\r\n                base: 'I',\r\n                chars: '\\u24BE\\uFF29\\xCC\\xCD\\xCE\\u0128\\u012A\\u012C\\u0130\\xCF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197',\r\n            },\r\n            { base: 'J', chars: '\\u24BF\\uFF2A\\u0134\\u0248\\u0237' },\r\n            { base: 'K', chars: '\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2' },\r\n            {\r\n                base: 'L',\r\n                chars: '\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780',\r\n            },\r\n            { base: 'LJ', chars: '\\u01C7' },\r\n            { base: 'Lj', chars: '\\u01C8' },\r\n            { base: 'M', chars: '\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C\\u03FB' },\r\n            {\r\n                base: 'N',\r\n                chars: '\\uA7A4\\u0220\\u24C3\\uFF2E\\u01F8\\u0143\\xD1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u019D\\uA790\\u1D0E',\r\n            },\r\n            { base: 'NJ', chars: '\\u01CA' },\r\n            { base: 'Nj', chars: '\\u01CB' },\r\n            {\r\n                base: 'O',\r\n                chars: '\\u24C4\\uFF2F\\xD2\\xD3\\xD4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\xD5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\xD6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\xD8\\u01FE\\u0186\\u019F\\uA74A\\uA74C',\r\n            },\r\n            { base: 'OE', chars: '\\u0152' },\r\n            { base: 'OI', chars: '\\u01A2' },\r\n            { base: 'OO', chars: '\\uA74E' },\r\n            { base: 'OU', chars: '\\u0222' },\r\n            { base: 'P', chars: '\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754' },\r\n            { base: 'Q', chars: '\\u24C6\\uFF31\\uA756\\uA758\\u024A' },\r\n            {\r\n                base: 'R',\r\n                chars: '\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782',\r\n            },\r\n            {\r\n                base: 'S',\r\n                chars: '\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784',\r\n            },\r\n            { base: 'T', chars: '\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786' },\r\n            { base: 'Th', chars: '\\u00DE' },\r\n            { base: 'TZ', chars: '\\uA728' },\r\n            {\r\n                base: 'U',\r\n                chars: '\\u24CA\\uFF35\\xD9\\xDA\\xDB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\xDC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244',\r\n            },\r\n            { base: 'V', chars: '\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245' },\r\n            { base: 'VY', chars: '\\uA760' },\r\n            { base: 'W', chars: '\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72' },\r\n            { base: 'X', chars: '\\u24CD\\uFF38\\u1E8A\\u1E8C' },\r\n            { base: 'Y', chars: '\\u24CE\\uFF39\\u1EF2\\xDD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE' },\r\n            { base: 'Z', chars: '\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762' },\r\n            {\r\n                base: 'a',\r\n                chars: '\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250\\u0251',\r\n            },\r\n            { base: 'aa', chars: '\\uA733' },\r\n            { base: 'ae', chars: '\\u00E6\\u01FD\\u01E3' },\r\n            { base: 'ao', chars: '\\uA735' },\r\n            { base: 'au', chars: '\\uA737' },\r\n            { base: 'av', chars: '\\uA739\\uA73B' },\r\n            { base: 'ay', chars: '\\uA73D' },\r\n            { base: 'b', chars: '\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253\\u0182' },\r\n            { base: 'c', chars: '\\uFF43\\u24D2\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184' },\r\n            {\r\n                base: 'd',\r\n                chars: '\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\u018B\\u13E7\\u0501\\uA7AA',\r\n            },\r\n            { base: 'dh', chars: '\\u00F0' },\r\n            { base: 'dz', chars: '\\u01F3\\u01C6' },\r\n            {\r\n                base: 'e',\r\n                chars: '\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u01DD',\r\n            },\r\n            { base: 'f', chars: '\\u24D5\\uFF46\\u1E1F\\u0192' },\r\n            { base: 'ff', chars: '\\uFB00' },\r\n            { base: 'fi', chars: '\\uFB01' },\r\n            { base: 'fl', chars: '\\uFB02' },\r\n            { base: 'ffi', chars: '\\uFB03' },\r\n            { base: 'ffl', chars: '\\uFB04' },\r\n            { base: 'g', chars: '\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\uA77F\\u1D79' },\r\n            { base: 'h', chars: '\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265' },\r\n            { base: 'hv', chars: '\\u0195' },\r\n            {\r\n                base: 'i',\r\n                chars: '\\u24D8\\uFF49\\xEC\\xED\\xEE\\u0129\\u012B\\u012D\\xEF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131',\r\n            },\r\n            { base: 'j', chars: '\\u24D9\\uFF4A\\u0135\\u01F0\\u0249' },\r\n            { base: 'k', chars: '\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3' },\r\n            {\r\n                base: 'l',\r\n                chars: '\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747\\u026D',\r\n            },\r\n            { base: 'lj', chars: '\\u01C9' },\r\n            { base: 'm', chars: '\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F' },\r\n            {\r\n                base: 'n',\r\n                chars: '\\u24DD\\uFF4E\\u01F9\\u0144\\xF1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5\\u043B\\u0509',\r\n            },\r\n            { base: 'nj', chars: '\\u01CC' },\r\n            {\r\n                base: 'o',\r\n                chars: '\\u24DE\\uFF4F\\xF2\\xF3\\xF4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\xF5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\xF6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\xF8\\u01FF\\uA74B\\uA74D\\u0275\\u0254\\u1D11',\r\n            },\r\n            { base: 'oe', chars: '\\u0153' },\r\n            { base: 'oi', chars: '\\u01A3' },\r\n            { base: 'oo', chars: '\\uA74F' },\r\n            { base: 'ou', chars: '\\u0223' },\r\n            { base: 'p', chars: '\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755\\u03C1' },\r\n            { base: 'q', chars: '\\u24E0\\uFF51\\u024B\\uA757\\uA759' },\r\n            {\r\n                base: 'r',\r\n                chars: '\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783',\r\n            },\r\n            {\r\n                base: 's',\r\n                chars: '\\u24E2\\uFF53\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B\\u0282',\r\n            },\r\n            { base: 'ss', chars: '\\xDF' },\r\n            {\r\n                base: 't',\r\n                chars: '\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787',\r\n            },\r\n            { base: 'th', chars: '\\u00FE' },\r\n            { base: 'tz', chars: '\\uA729' },\r\n            {\r\n                base: 'u',\r\n                chars: '\\u24E4\\uFF55\\xF9\\xFA\\xFB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\xFC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289',\r\n            },\r\n            { base: 'v', chars: '\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C' },\r\n            { base: 'vy', chars: '\\uA761' },\r\n            { base: 'w', chars: '\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73' },\r\n            { base: 'x', chars: '\\u24E7\\uFF58\\u1E8B\\u1E8D' },\r\n            { base: 'y', chars: '\\u24E8\\uFF59\\u1EF3\\xFD\\u0177\\u1EF9\\u0233\\u1E8F\\xFF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF' },\r\n            { base: 'z', chars: '\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763' },\r\n        ];\r\n        let diacriticsMap = {};\r\n        for (let i = 0; i < replacementList.length; i += 1) {\r\n            let chars = replacementList[i].chars;\r\n            for (let j = 0; j < chars.length; j += 1) {\r\n                diacriticsMap[chars[j]] = replacementList[i].base;\r\n            }\r\n        }\r\n        return input.replace(/[^\\u0000-\\u007e]/g, c => diacriticsMap[c] || c);\r\n    }\r\n};\r\nLatinizePipe = __decorate([\r\n    Pipe({ name: 'latinize' })\r\n], LatinizePipe);\r\nlet NgLatinizePipeModule = class NgLatinizePipeModule {\r\n};\r\nNgLatinizePipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [LatinizePipe],\r\n        exports: [LatinizePipe],\r\n    })\r\n], NgLatinizePipeModule);\n\n// idea from https://github.com/a8m/angular-filter\r\nlet WrapPipe = class WrapPipe {\r\n    transform(input, wrap, ends) {\r\n        return isString(input) && !isUndefined(wrap) ? [wrap, input, ends || wrap].join('') : input;\r\n    }\r\n};\r\nWrapPipe = __decorate([\r\n    Pipe({\r\n        name: 'wrap',\r\n    })\r\n], WrapPipe);\r\nlet NgWrapPipeModule = class NgWrapPipeModule {\r\n};\r\nNgWrapPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [WrapPipe],\r\n        exports: [WrapPipe],\r\n    })\r\n], NgWrapPipeModule);\n\nlet WithPipe = class WithPipe {\r\n    transform(input, start = null, ends = null, csensitive = false) {\r\n        if (!isString(input) || (isNull(start) && isNull(ends)) || start == '' || ends == '') {\r\n            return input;\r\n        }\r\n        input = csensitive ? input : input.toLowerCase();\r\n        if (!isNull(start) && !isNull(ends)) {\r\n            let a = !input.indexOf(csensitive ? start : start.toLowerCase());\r\n            let b = input.indexOf(csensitive ? ends : ends.toLowerCase(), input.length - ends.length) !== -1;\r\n            if (a == true && b == true) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        if (!isNull(start)) {\r\n            return !input.indexOf(csensitive ? start : start.toLowerCase());\r\n        }\r\n        if (!isNull(ends)) {\r\n            let position = input.length - ends.length;\r\n            return input.indexOf(csensitive ? ends : ends.toLowerCase(), position) !== -1;\r\n        }\r\n    }\r\n};\r\nWithPipe = __decorate([\r\n    Pipe({ name: 'with' })\r\n], WithPipe);\r\nlet NgWithPipeModule = class NgWithPipeModule {\r\n};\r\nNgWithPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [WithPipe],\r\n        exports: [WithPipe],\r\n    })\r\n], NgWithPipeModule);\n\nlet ReverseStrPipe = class ReverseStrPipe {\r\n    transform(input) {\r\n        if (!isString(input)) {\r\n            return input;\r\n        }\r\n        return Array.from(input)\r\n            .reverse()\r\n            .join('');\r\n    }\r\n};\r\nReverseStrPipe = __decorate([\r\n    Pipe({\r\n        name: 'reverseStr',\r\n    })\r\n], ReverseStrPipe);\r\nlet NgReverseStrPipeModule = class NgReverseStrPipeModule {\r\n};\r\nNgReverseStrPipeModule = __decorate([\r\n    NgModule({\r\n        declarations: [ReverseStrPipe],\r\n        exports: [ReverseStrPipe],\r\n    })\r\n], NgReverseStrPipeModule);\n\nlet NgStringPipesModule = class NgStringPipesModule {\r\n};\r\nNgStringPipesModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            NgCapitalizePipeModule,\r\n            NgDecodeURIComponentPipeModule,\r\n            NgDecodeURIPipeModule,\r\n            NgEncodeURIComponentPipeModule,\r\n            NgLeftPadPipeModule,\r\n            NgMatchPipeModule,\r\n            NgPadPipeModule,\r\n            NgReplacePipeModule,\r\n            NgRightPadPipeModule,\r\n            NgSplitPipeModule,\r\n            NgTestPipeModule,\r\n            NgTrimPipeModule,\r\n            NgNewlinesPipeModule,\r\n            NgUpperFirstPipeModule,\r\n            NgTemplatePipeModule,\r\n            NgEncodeURIPipeModule,\r\n            NgTruncatePipeModule,\r\n            NgRepeatPipeModule,\r\n            NgSlugifyPipeModule,\r\n            NgStripTagsPipeModule,\r\n            NgLatinizePipeModule,\r\n            NgWrapPipeModule,\r\n            NgWithPipeModule,\r\n            NgReverseStrPipeModule,\r\n        ],\r\n    })\r\n], NgStringPipesModule);\n\nlet NgPipesModule = class NgPipesModule {\r\n};\r\nNgPipesModule = __decorate([\r\n    NgModule({\r\n        exports: [\r\n            NgArrayPipesModule,\r\n            NgMathPipesModule,\r\n            NgBooleanPipesModule,\r\n            NgStringPipesModule,\r\n            NgObjectPipesModule,\r\n            NgAggregatePipesModule,\r\n        ],\r\n    })\r\n], NgPipesModule);\n\nexport { AbsPipe, BytesPipe, CapitalizePipe, CeilPipe, ChunkPipe, CountPipe, DecodeURIComponentPipe, DecodeURIPipe, DeepPipe, DefaultsPipe, DegreesPipe, DropPipe, EmptyPipe, EncodeURIComponentPipe, EncodeURIPipe, EveryPipe, FirstOrDefaultPipe, FlattenPipe, FloorPipe, GroupByPipe, HeadPipe, InitialPipe, IntersectionPipe, IsArrayPipe, IsDefinedPipe, IsEqualPipe, IsFunctionPipe, IsGreaterOrEqualPipe, IsGreaterPipe, IsIdenticalPipe, IsLessOrEqualPipe, IsLessPipe, IsNilPipe, IsNotEqualPipe, IsNotIdenticalPipe, IsNullPipe, IsNumberPipe, IsObjectPipe, IsStringPipe, IsUndefinedPipe, JoinPipe, KeysPipe, LastPipe, LatinizePipe, LeftPadPipe, MapPipe, MatchPipe, MaxPipe, MeanPipe, MinPipe, NewlinesPipe, NgAbsPipeModule, NgAggregatePipesModule, NgArrayPipesModule, NgBooleanPipesModule, NgBytesPipeModule, NgCapitalizePipeModule, NgCeilPipeModule, NgChunkPipeModule, NgConditionsPipesModule, NgCountPipeModule, NgDecodeURIComponentPipeModule, NgDecodeURIPipeModule, NgDeepPipeModule, NgDefaultsPipeModule, NgDegreesPipeModule, NgDropPipeModule, NgEmptyPipeModule, NgEncodeURIComponentPipeModule, NgEncodeURIPipeModule, NgEveryPipeModule, NgFirstOrDefaultPipeModule, NgFlattenPipeModule, NgFloorPipeModule, NgGroupByPipeModule, NgHeadPipeModule, NgInitialPipeModule, NgIntersectionPipeModule, NgIsArrayPipeModule, NgIsDefinedPipeModule, NgIsEqualPipeModule, NgIsFunctionPipeModule, NgIsGreaterOrEqualPipeModule, NgIsGreaterPipeModule, NgIsIdenticalPipeModule, NgIsLessOrEqualPipeModule, NgIsLessPipeModule, NgIsNilPipeModule, NgIsNotEqualPipeModule, NgIsNotIdenticalPipeModule, NgIsNullPipeModule, NgIsNumberPipeModule, NgIsObjectPipeModule, NgIsStringPipeModule, NgIsUndefinedPipeModule, NgJoinPipeModule, NgKeysPipeModule, NgLastPipeModule, NgLatinizePipeModule, NgLeftPadPipeModule, NgMapPipeModule, NgMatchPipeModule, NgMathPipesModule, NgMaxPipeModule, NgMeanPipeModule, NgMinPipeModule, NgNewlinesPipeModule, NgObjectPipesModule, NgOrderByPipeModule, NgOrdinalPipeModule, NgPadPipeModule, NgPipesModule, NgPluckPipeModule, NgPowPipeModule, NgRadiansPipeModule, NgRandomPipeModule, NgRangePipeModule, NgRepeatPipeModule, NgReplacePipeModule, NgReversePipeModule, NgReverseStrPipeModule, NgRightPadPipeModule, NgRoundPipeModule, NgShufflePipeModule, NgSlugifyPipeModule, NgSomePipeModule, NgSplitPipeModule, NgSqrtPipeModule, NgStringPipesModule, NgStripTagsPipeModule, NgSumPipeModule, NgTailPipeModule, NgTakePipeModule, NgTakeUntilPipeModule, NgTakeWhilePipeModule, NgTemplatePipeModule, NgTestPipeModule, NgToArrayPipeModule, NgTrimPipeModule, NgTruncatePipeModule, NgTypesPipesModule, NgUnionPipeModule, NgUniqPipeModule, NgUpperFirstPipeModule, NgWherePipeModule, NgWithPipeModule, NgWithoutPipeModule, NgWrapPipeModule, OrderByPipe, OrdinalPipe, PadPipe, PluckPipe, PowPipe, RadiansPipe, RandomPipe, RangePipe, RepeatPipe, ReplacePipe, ReversePipe, ReverseStrPipe, RightPadPipe, RoundPipe, ShufflePipe, SlugifyPipe, SomePipe, SplitPipe, SqrtPipe, StripTagsPipe, SumPipe, TailPipe, TakePipe, TakeUntilPipe, TakeWhilePipe, TemplatePipe, TestPipe, ToArrayPipe, TrimPipe, TruncatePipe, UnionPipe, UniqPipe, UpperFirstPipe, WherePipe, WithPipe, WithoutPipe, WrapPipe };\n//# sourceMappingURL=angular-pipes.js.map\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { NgFloorPipeModule } from 'angular-pipes';\n\nimport { TimeDifferencePipe } from './time-difference.pipe';\nimport { TimeAgoPipe } from './time-ago.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IonicModule,\n    NgFloorPipeModule\n  ],\n  declarations: [\n    TimeDifferencePipe,\n    TimeAgoPipe\n  ],\n  exports: [\n    NgFloorPipeModule,\n    TimeDifferencePipe,\n    TimeAgoPipe\n  ]\n})\nexport class PipesModule {}\n","import { DataStore } from '../shell/data-store';\nimport { Observable, of } from 'rxjs';\n\nexport interface IResolvedRouteData<T> {\n  data: T | DataStore<T>;\n}\n\nexport class ResolverHelper<T> {\n  // More info on function overloads here: https://www.typescriptlang.org/docs/handbook/functions.html#overloads\n  public static extractData<T>(source: (T | DataStore<T>), constructor: (new(...args: any[]) => T)): Observable<T> {\n    if (source instanceof DataStore) {\n      return source.state;\n    } else if (source instanceof constructor) {\n      // The right side of instanceof should be an expression evaluating to a constructor function (ie. a class), not a type\n      // That's why we included an extra parameter which acts as a constructor function for type T\n      // (see: https://github.com/microsoft/TypeScript/issues/5236)\n      return of(source);\n    }\n  }\n}\n"],"sourceRoot":"webpack:///"}