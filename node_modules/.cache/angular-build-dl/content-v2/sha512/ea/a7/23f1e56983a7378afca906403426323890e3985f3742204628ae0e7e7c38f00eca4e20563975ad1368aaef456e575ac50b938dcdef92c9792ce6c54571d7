{"version":3,"sources":["./src/app/notifications/notifications.resolver.ts","./src/app/notifications/notifications.page.ts","./src/app/notifications/notifications.page.html","./src/app/notifications/notifications.module.ts","./src/app/notifications/notifications.service.ts"],"names":[],"mappings":"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","file":"notifications-notifications-module-ngfactory-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NotificationsService } from './notifications.service';\n\n@Injectable()\nexport class NotificationsResolver implements Resolve<any> {\n\n  constructor(private notificationsService: NotificationsService) { }\n\n  resolve() {\n    // Base Observable (where we get data from)\n    const dataObservable: Observable<any> = this.notificationsService.getData();\n\n    return { source: dataObservable };\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription, Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-notifications',\n  templateUrl: './notifications.page.html',\n  styleUrls: [\n    './styles/notifications.page.scss',\n    './styles/notifications.shell.scss'\n  ]\n})\nexport class NotificationsPage implements OnInit {\n  // Gather all component subscription in one place. Can be one Subscription or multiple (chained using the Subscription.add() method)\n  subscriptions: Subscription;\n\n  notifications: any;\n\n  constructor(private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    // On init, the route subscription is the active subscription\n    this.subscriptions = this.route.data\n    .subscribe(\n      (resolvedData) => {\n        const dataSource: {source: Observable<any>} = resolvedData['data'];\n\n        // Route subscription resolved, now the active subscription is the the one from the dataSource\n        this.subscriptions = dataSource.source\n        .subscribe(\n          (pageData) => {\n            this.notifications = pageData;\n          },\n          (error) => {}\n        );\n      },\n      (error) => {}\n    );\n  }\n\n  // NOTE: Ionic only calls ngOnDestroy if the page was popped (ex: when navigating back)\n  // Since ngOnDestroy might not fire when you navigate from the current page, use ionViewWillLeave to cleanup Subscriptions\n  ionViewWillLeave(): void {\n    // console.log('TravelListingPage [ionViewWillLeave]');\n    this.subscriptions.unsubscribe();\n  }\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title>\n      Notifications\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"notifications-content\">\n  <ng-container *ngIf=\"notifications\">\n    <ion-item-group>\n      <ion-item-divider sticky>\n        <ion-label>Today</ion-label>\n      </ion-item-divider>\n      <ion-item class=\"notification-item\" lines=\"none\" *ngFor=\"let notification of notifications.today\">\n        <ion-row class=\"notification-item-wrapper\">\n          <ion-col size=\"2\">\n            <app-aspect-ratio [ratio]=\"{w: 1, h: 1}\">\n              <app-image-shell class=\"notification-image\" [src]=\"notification.image\" [alt]=\"'user image'\"></app-image-shell>\n            </app-aspect-ratio>\n          </ion-col>\n          <ion-col class=\"details-wrapper\">\n            <h2 class=\"details-name\">{{ notification.name }}</h2>\n            <p class=\"details-description\">{{ notification.message }}</p>\n          </ion-col>\n          <ion-col size=\"2\" class=\"date-wrapper\">\n            <h3 class=\"notification-date\">{{ notification.date }}</h3>\n          </ion-col>\n        </ion-row>\n      </ion-item>\n    </ion-item-group>\n    <ion-item-group>\n      <ion-item-divider sticky>\n        <ion-label>Yesterday</ion-label>\n      </ion-item-divider>\n      <ion-item class=\"notification-item\" lines=\"none\" *ngFor=\"let notification of notifications.yesterday\">\n        <ion-row class=\"notification-item-wrapper\">\n          <ion-col size=\"2\">\n            <app-aspect-ratio [ratio]=\"{w: 1, h: 1}\">\n              <app-image-shell class=\"notification-image\" [src]=\"notification.image\" [alt]=\"'user image'\"></app-image-shell>\n            </app-aspect-ratio>\n          </ion-col>\n          <ion-col class=\"details-wrapper\">\n            <h2 class=\"details-name\">{{ notification.name }}</h2>\n            <p class=\"details-description\">{{ notification.message }}</p>\n          </ion-col>\n          <ion-col size=\"2\" class=\"date-wrapper\">\n            <h3 class=\"notification-date\">{{ notification.date }}</h3>\n          </ion-col>\n        </ion-row>\n      </ion-item>\n    </ion-item-group>\n  </ng-container>\n</ion-content>\n","import { IonicModule } from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ComponentsModule } from '../components/components.module';\n\nimport { NotificationsPage } from './notifications.page';\nimport { NotificationsResolver } from '../notifications/notifications.resolver';\nimport { NotificationsService } from '../notifications/notifications.service';\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    ComponentsModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: NotificationsPage,\n        resolve: {\n          data: NotificationsResolver\n        }\n      }\n    ])\n  ],\n  declarations: [ NotificationsPage ],\n  providers: [\n    NotificationsResolver,\n    NotificationsService\n  ]\n})\nexport class NotificationsPageModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class NotificationsService {\n  constructor(private http: HttpClient) { }\n\n  public getData(): Observable<any> {\n    return this.http.get<any>('./assets/-data/notifications.json');\n  }\n}\n"],"sourceRoot":"webpack:///"}