{"version":3,"sources":["webpack:///src/app/components/show-hide-password/show-hide-password.component.html","webpack:///src/app/components/show-hide-password/show-hide-password.component.ts","webpack:///src/app/firebase/auth/sign-in/firebase-sign-in.module.ts","webpack:///src/app/firebase/auth/sign-in/firebase-sign-in.page.html","webpack:///src/app/firebase/auth/sign-in/firebase-sign-in.page.ts"],"names":["ShowHidePasswordComponent","show","input","type","routes","path","component","FirebaseSignInPageModule","FirebaseSignInPage","router","route","menu","authService","ngZone","loadingController","location","historyHelper","validation_messages","message","loginForm","compose","required","pattern","minLength","authRedirectResult","getRedirectResult","subscribe","result","user","redirectLoggedUserToProfilePage","error","manageAuthWithProvidersErrors","queryParams","params","authProvider","presentLoading","enable","dismissLoading","run","previousUrl","navigate","replaceUrl","authProviderCapitalized","toUpperCase","slice","create","redirectLoader","present","dismiss","replaceState","getState","errorMessage","submitError","url","split","resetSubmitError","signInWithEmail","value","then","prepareForAuthWithProvidersRedirection","signInWithFacebook","signInWithGoogle","console","log","signInWithTwitter"],"mappings":"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","file":"default~firebase-auth-sign-in-firebase-sign-in-module-ngfactory~sign-in-firebase-sign-in-module-ngfactory-es5.js","sourcesContent":["<ng-content></ng-content>\n<a class=\"type-toggle\" (click)=\"toggleShow()\">\n\t<ion-icon class=\"show-option\" [hidden]=\"show\" name=\"eye-off-outline\"></ion-icon>\n\t<ion-icon class=\"hide-option\" [hidden]=\"!show\" name=\"eye-outline\"></ion-icon>\n  <!-- In case you want to use text instead of icons -->\n\t<!--\n  <span class=\"show-option\" [hidden]=\"show\">show</span>\n\t<span class=\"hide-option\" [hidden]=\"!show\">hide</span>\n  -->\n</a>\n","import { Component, ContentChild } from '@angular/core';\n\nimport { IonInput } from '@ionic/angular';\n\n@Component({\n  selector: 'app-show-hide-password',\n  templateUrl: './show-hide-password.component.html',\n  styleUrls: [\n    './show-hide-password.component.scss'\n  ]\n})\nexport class ShowHidePasswordComponent {\n  show = false;\n\n  @ContentChild(IonInput) input: IonInput;\n\n  constructor() {}\n\n  toggleShow() {\n    this.show = !this.show;\n    if (this.show) {\n      this.input.type = 'text';\n    } else {\n      this.input.type = 'password';\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { IonicModule } from '@ionic/angular';\nimport { FirebaseSignInPage } from './firebase-sign-in.page';\nimport { ComponentsModule } from '../../../components/components.module';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: FirebaseSignInPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    ComponentsModule\n  ],\n  declarations: [FirebaseSignInPage]\n})\nexport class FirebaseSignInPageModule {}\n","<ion-header class=\"ion-no-border\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"login-content\">\n  <h2 class=\"auth-title\">\n    <br/>\n  </h2>\n  <img src=\"/assets/images/ig_logo_black.png\" alt=\"\">\n  <h5 style=\"text-align: center;\">Please login</h5>\n  <form [formGroup]=\"loginForm\" (ngSubmit)=\"signInWithEmail()\">\n    <ion-list class=\"inputs-list\" lines=\"full\">\n      <ion-item class=\"input-item\">\n        <ion-input type=\"email\" placeholder=\"Email\" formControlName=\"email\" clearInput autocapitalize=\"off\" inputmode=\"email\"></ion-input>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validation_messages.email\">\n          <div class=\"error-message\" *ngIf=\"loginForm.get('email').hasError(validation.type) && (loginForm.get('email').dirty || loginForm.get('email').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n\n      <ion-item class=\"input-item\">\n        <app-show-hide-password>\n          <ion-input type=\"password\" placeholder=\"Password\" formControlName=\"password\"></ion-input>\n        </app-show-hide-password>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validation_messages.password\">\n          <div class=\"error-message\" *ngIf=\"loginForm.get('password').hasError(validation.type) && (loginForm.get('password').dirty || loginForm.get('password').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n    </ion-list>\n\n    <ion-button class=\"login-btn\" type=\"submit\" expand=\"block\" [disabled]=\"!loginForm.valid\">Log In</ion-button>\n    <div class=\"error-container\" *ngIf=\"submitError\">\n      <div class=\"error-message\">\n        <ion-icon name=\"information-circle-outline\"></ion-icon>\n        <span>{{ submitError }}</span>\n      </div>\n    </div>\n      <ion-button class=\"signup-btn\" class=\"login-btn\" expand=\"block\" [routerLink]=\"['/firebase/auth/sign-up']\">\n        Sign Up!\n      </ion-button>\n      \n   \n  </form>\n\n <!--  <div class=\"social-auth-options\">\n    <p class=\"options-divider\">Or</p>\n    <ion-button class=\"social-auth-btn facebook-auth-btn\" expand=\"block\" color=\"facebook\" (click)=\"doFacebookLogin()\">Log In with Facebook</ion-button>\n    <ion-button class=\"social-auth-btn google-auth-btn\" expand=\"block\" color=\"google\" (click)=\"doGoogleLogin()\">Log In with Google</ion-button>\n    <ion-button class=\"social-auth-btn twitter-auth-btn\" expand=\"block\" color=\"twitter\" (click)=\"doTwitterLogin()\">Log In with Twitter</ion-button>\n  </div> -->\n</ion-content>\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { MenuController, LoadingController } from '@ionic/angular';\nimport { Subscription } from 'rxjs';\n\nimport { HistoryHelperService } from '../../../utils/history-helper.service';\nimport { FirebaseAuthService } from '../firebase-auth.service';\n\n@Component({\n  selector: 'app-firebase-sign-in',\n  templateUrl: './firebase-sign-in.page.html',\n  styleUrls: [\n    './styles/firebase-sign-in.page.scss'\n  ]\n})\nexport class FirebaseSignInPage implements OnInit {\n  loginForm: FormGroup;\n  submitError: string;\n  redirectLoader: HTMLIonLoadingElement;\n  authRedirectResult: Subscription;\n\n  validation_messages = {\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Enter a valid email.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 6 characters long.' }\n    ]\n  };\n\n  constructor(\n    public router: Router,\n    public route: ActivatedRoute,\n    public menu: MenuController,\n    public authService: FirebaseAuthService,\n    private ngZone: NgZone,\n    public loadingController: LoadingController,\n    public location: Location,\n    public historyHelper: HistoryHelperService\n  ) {\n    this.loginForm = new FormGroup({\n      'email': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      'password': new FormControl('', Validators.compose([\n        Validators.minLength(6),\n        Validators.required\n      ]))\n    });\n\n    // Get firebase authentication redirect result invoken when using signInWithRedirect()\n    // signInWithRedirect() is only used when client is in web but not desktop\n    this.authRedirectResult = this.authService.getRedirectResult()\n    .subscribe(result => {\n      if (result.user) {\n        this.redirectLoggedUserToProfilePage();\n      } else if (result.error) {\n        this.manageAuthWithProvidersErrors(result.error);\n      }\n    });\n\n    // Check if url contains our custom 'auth-redirect' param, then show a loader while we receive the getRedirectResult notification\n    this.route.queryParams.subscribe(params => {\n      const authProvider = params['auth-redirect'];\n      if (authProvider) {\n        this.presentLoading(authProvider);\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.menu.enable(false);\n  }\n\n  // Once the auth provider finished the authentication flow, and the auth redirect completes,\n  // hide the loader and redirect the user to the profile page\n  redirectLoggedUserToProfilePage() {\n    this.dismissLoading();\n\n    // As we are calling the Angular router navigation inside a subscribe method, the navigation will be triggered outside Angular zone.\n    // That's why we need to wrap the router navigation call inside an ngZone wrapper\n    this.ngZone.run(() => {\n      // Get previous URL from our custom History Helper\n      // If there's no previous page, then redirect to profile\n      // const previousUrl = this.historyHelper.previousUrl || 'firebase/auth/profile';\n      const previousUrl = 'app/categories';\n\n      // No need to store in the navigation history the sign-in page with redirect params (it's justa a mandatory mid-step)\n      // Navigate to profile and replace current url with profile\n      this.router.navigate([previousUrl], { replaceUrl: true });\n    });\n  }\n\n  async presentLoading(authProvider?: string) {\n    const authProviderCapitalized = authProvider[0].toUpperCase() + authProvider.slice(1);\n    this.redirectLoader = await this.loadingController.create({\n      message: authProvider ? 'Signing in with ' + authProviderCapitalized : 'Signin in ...'\n    });\n    await this.redirectLoader.present();\n  }\n\n  async dismissLoading() {\n    if (this.redirectLoader) {\n      await this.redirectLoader.dismiss();\n    }\n  }\n\n  // Before invoking auth provider redirect flow, present a loading indicator and add a flag to the path.\n  // The precense of the flag in the path indicates we should wait for the auth redirect to complete.\n  prepareForAuthWithProvidersRedirection(authProvider: string) {\n    this.presentLoading(authProvider);\n\n    this.location.replaceState(this.location.path(), 'auth-redirect=' + authProvider, this.location.getState());\n  }\n\n  manageAuthWithProvidersErrors(errorMessage: string) {\n    this.submitError = errorMessage;\n    // remove auth-redirect param from url\n    this.location.replaceState(this.router.url.split('?')[0], '');\n    this.dismissLoading();\n  }\n\n  resetSubmitError() {\n    this.submitError = null;\n  }\n\n  \n  signInWithEmail() {\n    this.resetSubmitError();\n    this.authService.signInWithEmail(this.loginForm.value['email'], this.loginForm.value['password'])\n    .then(user => {\n      // navigate to user profile\n      this.redirectLoggedUserToProfilePage();\n    })\n    .catch(error => {\n      this.submitError = error.message;\n      this.dismissLoading();\n    });\n  }\n\n  doFacebookLogin(): void {\n    this.resetSubmitError();\n    this.prepareForAuthWithProvidersRedirection('facebook');\n\n    this.authService.signInWithFacebook()\n    .subscribe((result) => {\n      // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n      // const token = result.credential.accessToken;\n      this.redirectLoggedUserToProfilePage();\n    }, (error) => {\n      this.manageAuthWithProvidersErrors(error.message);\n    });\n  }\n\n  doGoogleLogin(): void {\n    this.resetSubmitError();\n    this.prepareForAuthWithProvidersRedirection('google');\n\n    this.authService.signInWithGoogle()\n    .subscribe((result) => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      // var token = result.credential.accessToken;\n      this.redirectLoggedUserToProfilePage();\n    }, (error) => {\n        console.log(error);\n      this.manageAuthWithProvidersErrors(error.message);\n    });\n  }\n\n  doTwitterLogin(): void {\n    this.resetSubmitError();\n    this.prepareForAuthWithProvidersRedirection('twitter');\n\n    this.authService.signInWithTwitter()\n    .subscribe((result) => {\n      // This gives you a Twitter Access Token. You can use it to access the Twitter API.\n      // var token = result.credential.accessToken;\n      this.redirectLoggedUserToProfilePage();\n    }, (error) => {\n      console.log(error);\n      this.manageAuthWithProvidersErrors(error.message);\n    });\n  }\n}\n"]}