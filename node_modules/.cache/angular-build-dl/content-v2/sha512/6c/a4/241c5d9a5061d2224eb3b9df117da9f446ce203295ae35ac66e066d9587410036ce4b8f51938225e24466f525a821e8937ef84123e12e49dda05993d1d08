{"version":3,"sources":["webpack:///src/app/shell/text-shell/text-shell.component.html","webpack:///src/app/shell/data-store.ts","webpack:///src/app/shell/text-shell/text-shell.component.ts"],"names":["ShellModel","isShell","DataStore","shellModel","networkDelay","settings","timeline","dataSourceObservable","dataSourceWithShellObservable","AppendShell","subscribe","dataValue","next","asObservable","dataObservable","delayObservable","pipe","delayValue","Object","assign","TextShellComponent","debugMode","debug","textLoaded","val","_data","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uEAAA,yH,IAAc,6E,IAAA,I,EAAA;AAAA;AAAA;;AAAA;AAAW,S;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAKaA,U,GAAb;AAAA;;AACE,aAAAC,OAAA,GAAU,KAAV;AACD,O;;UAEYC,S;AAQX,2BAAoBC,UAApB,EAAmC;AAAA;;AAAf,eAAAA,UAAA,GAAAA,UAAA,CAAe,CAPnC;AACA;AACA;;AACQ,eAAAC,YAAA,GAAgB,wEAAeC,QAAf,IAA2B,wEAAeA,QAAf,CAAwBD,YAApD,GAAoE,wEAAeC,QAAf,CAAwBD,YAA5F,GAA2G,CAA1H;AAEA,eAAAE,QAAA,GAA0C,IAAI,kDAAJ,CAAkB,CAAlB,CAA1C;AAE8B,S,CAEtC;AACA;AACA;;;;;+BAmBKC,oB,EAAmC;AAAA;;AACtC,gBAAMC,6BAA6B,GAAGN,SAAS,CAACO,WAAV,CAAsBF,oBAAtB,EAA4C,KAAKJ,UAAjD,EAA6D,KAAKC,YAAlE,CAAtC;AAEAI,yCAA6B,CAC5BE,SADD,CACW,UAACC,SAAD,EAA+B;AACxC,mBAAI,CAACL,QAAL,CAAcM,IAAd,CAAmBD,SAAnB;AACD,aAHD;AAID;;;8BAEe;AACd,mBAAO,KAAKL,QAAL,CAAcO,YAAd,EAAP;AACD;;;sCA7B4BC,c,EAA+BX,U,EAAiC;AAAA,gBAAlBC,YAAkB,uEAAH,GAAG;AAC3F,gBAAMW,eAAe,GAAG,gDAAG,IAAH,EAASC,IAAT,CACtB,6DAAMZ,YAAN,CADsB,CAAxB,CAD2F,CAK3F;AACA;;AACA,mBAAO,2DAAc,CACnBW,eADmB,EAEnBD,cAFmB,CAAd,EAGJE,IAHI,EAIL;AACA,uEAAI;AAAA;AAAA,kBAAEC,UAAF;AAAA,kBAAcN,SAAd;;AAAA,qBAA6DO,MAAM,CAACC,MAAP,CAAcR,SAAd,EAAyB;AAACV,uBAAO,EAAE;AAAV,eAAzB,CAA7D;AAAA,aAAJ,CALK,EAML;AACA,6EAAUiB,MAAM,CAACC,MAAP,CAAchB,UAAd,EAA0B;AAACF,qBAAO,EAAE;AAAV,aAA1B,CAAV,CAPK,CAAP;AASD;;;;;;;;;;;;;;;;;;;;;ACpCH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAOamB,kB;AAqBX,sCAAc;AAAA;;AApBd;AACQ,eAAAC,SAAA,GAAa,wEAAehB,QAAf,IAA2B,wEAAeA,QAAf,CAAwBiB,KAApD,GAA6D,wEAAejB,QAAf,CAAwBiB,KAArF,GAA6F,KAAzG;AAK0B,eAAAC,UAAA,GAAa,KAAb;AAcjB;;;;4BAZCC,G,EAAU;AAC1B,gBAAI,CAAC,KAAKH,SAAV,EAAqB;AACnB,mBAAKI,KAAL,GAAcD,GAAG,KAAKE,SAAR,IAAqBF,GAAG,KAAK,IAA9B,GAAsCA,GAAtC,GAA4C,EAAzD;AACD;;AAED,gBAAI,KAAKC,KAAL,IAAc,KAAKA,KAAL,KAAe,EAAjC,EAAqC;AACnC,mBAAKF,UAAL,GAAkB,IAAlB;AACD,aAFD,MAEO;AACL,mBAAKA,UAAL,GAAkB,KAAlB;AACD;AACF","file":"default~app-shell-app-shell-module-ngfactory~brick-details-brick-details-module-ngfactory~brick-list~aa4d1bc6-es5.js","sourcesContent":["<ng-container>{{ _data }}</ng-container>\n","import { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { delay, map, startWith } from 'rxjs/operators';\n\nimport { AppShellConfig } from './config/app-shell.config';\n\nexport class ShellModel {\n  isShell = false;\n}\n\nexport class DataStore<T> {\n  // We wait on purpose 2 secs on local environment when fetching from json to simulate the backend roundtrip.\n  // However, in production you should set this delay to 0 in the assets/config/app-shell.config.prod.json file.\n  // tslint:disable-next-line:max-line-length\n  private networkDelay = (AppShellConfig.settings && AppShellConfig.settings.networkDelay) ? AppShellConfig.settings.networkDelay : 0;\n\n  private timeline: ReplaySubject<T & ShellModel> = new ReplaySubject(1);\n\n  constructor(private shellModel: T) { }\n\n  // Static function with generics\n  // (ref: https://stackoverflow.com/a/24293088/1116959)\n  // Append a shell (T & ShellModel) to every value (T) emmited to the timeline\n  public static AppendShell<T>(dataObservable: Observable<T>, shellModel: T, networkDelay = 400): Observable<T & ShellModel> {\n    const delayObservable = of(true).pipe(\n      delay(networkDelay)\n    );\n\n    // Assign shell flag accordingly\n    // (ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n    return combineLatest([\n      delayObservable,\n      dataObservable\n    ]).pipe(\n      // Dismiss unnecessary delayValue\n      map(([delayValue, dataValue]: [boolean, T]): (T & ShellModel) => Object.assign(dataValue, {isShell: false})),\n      // Set the shell model as the initial value\n      startWith(Object.assign(shellModel, {isShell: true}))\n    );\n  }\n\n  load(dataSourceObservable: Observable<T>): void {\n    const dataSourceWithShellObservable = DataStore.AppendShell(dataSourceObservable, this.shellModel, this.networkDelay);\n\n    dataSourceWithShellObservable\n    .subscribe((dataValue: T & ShellModel) => {\n      this.timeline.next(dataValue);\n    });\n  }\n\n  public get state(): Observable<T & ShellModel> {\n    return this.timeline.asObservable();\n  }\n}\n","import { Component, Input, HostBinding } from '@angular/core';\n\nimport { AppShellConfig } from '../config/app-shell.config';\n\n@Component({\n  selector: 'app-text-shell',\n  templateUrl: './text-shell.component.html',\n  styleUrls: ['./text-shell.component.scss']\n})\nexport class TextShellComponent {\n  // To debug shell styles, change configuration in the assets/app-shell.config.json file\n  private debugMode = (AppShellConfig.settings && AppShellConfig.settings.debug) ? AppShellConfig.settings.debug : false;\n\n  // tslint:disable-next-line:variable-name\n  _data: '';\n\n  @HostBinding('class.text-loaded') textLoaded = false;\n\n  @Input() set data(val: any) {\n    if (!this.debugMode) {\n      this._data = (val !== undefined && val !== null) ? val : '';\n    }\n\n    if (this._data && this._data !== '') {\n      this.textLoaded = true;\n    } else {\n      this.textLoaded = false;\n    }\n  }\n\n  constructor() { }\n}\n"]}